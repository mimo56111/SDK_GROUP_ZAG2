
SDK_Zag_Group2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000190e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000190e  000019a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800090  00800090  000019d2  2**0
                  ALLOC
  3 .stab         0000243c  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007d8  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  000045e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000230c  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b49  00000000  00000000  00006b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000100c  00000000  00000000  000076bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  000086cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079f  00000000  00000000  00008c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001979  00000000  00000000  000093b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000ad30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 06 	call	0xd96	; 0xd96 <main>
      8a:	0c 94 85 0c 	jmp	0x190a	; 0x190a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vInit>:
 */ 
#include "ADC_MCAL.h"

void ADC_vInit(){
	/*Configuration Vref (VCC on AVCC with external capacitor at AVREF pin*/
	SEt_BIT(XADMUX,REFS0);
      92:	3e 9a       	sbi	0x07, 6	; 7
	SEt_BIT(XADMUX,REFS1);
      94:	3f 9a       	sbi	0x07, 7	; 7
	/*Enable ADC*/
	SEt_BIT(XADCSRA,ADEN);
      96:	37 9a       	sbi	0x06, 7	; 6
	/*Adjust ADC Clock make the division factor 64 (8M/64 =125KHz)*/
	SEt_BIT(XADCSRA,ADPS2);
      98:	32 9a       	sbi	0x06, 2	; 6
	SEt_BIT(XADCSRA,ADPS1);
      9a:	31 9a       	sbi	0x06, 1	; 6
	CLR_BIT(XADCSRA,ADPS0);
      9c:	30 98       	cbi	0x06, 0	; 6
}
      9e:	08 95       	ret

000000a0 <ADC_u16Read>:
u_int16 ADC_u16Read(u_int8 Channel){
	u_int16 read_value;
	
	Channel &=0x07;  
	
	XADMUX &=0xE0;
      a0:	97 b1       	in	r25, 0x07	; 7
      a2:	90 7e       	andi	r25, 0xE0	; 224
      a4:	97 b9       	out	0x07, r25	; 7
	
	XADMUX|=Channel;
      a6:	97 b1       	in	r25, 0x07	; 7


u_int16 ADC_u16Read(u_int8 Channel){
	u_int16 read_value;
	
	Channel &=0x07;  
      a8:	87 70       	andi	r24, 0x07	; 7
	
	XADMUX &=0xE0;
	
	XADMUX|=Channel;
      aa:	98 2b       	or	r25, r24
      ac:	97 b9       	out	0x07, r25	; 7
	
	SEt_BIT(XADCSRA,ADSC);
      ae:	36 9a       	sbi	0x06, 6	; 6
	
	while(IS_BIT_CLR(XADCSRA,ADIF));
      b0:	34 9b       	sbis	0x06, 4	; 6
      b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_u16Read+0x10>
	
	SEt_BIT(XADCSRA,ADIF);
      b4:	34 9a       	sbi	0x06, 4	; 6
	
	read_value=XADCL;
      b6:	84 b1       	in	r24, 0x04	; 4
      b8:	90 e0       	ldi	r25, 0x00	; 0
	read_value|=(XADCH<<8); 
      ba:	45 b1       	in	r20, 0x05	; 5
      bc:	34 2f       	mov	r19, r20
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	82 2b       	or	r24, r18
      c2:	93 2b       	or	r25, r19
	
	return read_value;
      c4:	08 95       	ret

000000c6 <GPIO_vSETPIN_DDR>:
#define OUTPUT 1
#define INPUT  0
#define HIGH   1
#define LOW    0
void GPIO_vSETPIN_DDR(u_int8 portnum , u_int8 pinnum , u_int8 dir){
	switch(portnum){
      c6:	84 34       	cpi	r24, 0x44	; 68
      c8:	09 f4       	brne	.+2      	; 0xcc <GPIO_vSETPIN_DDR+0x6>
      ca:	71 c0       	rjmp	.+226    	; 0x1ae <GPIO_vSETPIN_DDR+0xe8>
      cc:	85 34       	cpi	r24, 0x45	; 69
      ce:	48 f4       	brcc	.+18     	; 0xe2 <GPIO_vSETPIN_DDR+0x1c>
      d0:	82 34       	cpi	r24, 0x42	; 66
      d2:	99 f1       	breq	.+102    	; 0x13a <GPIO_vSETPIN_DDR+0x74>
      d4:	83 34       	cpi	r24, 0x43	; 67
      d6:	08 f0       	brcs	.+2      	; 0xda <GPIO_vSETPIN_DDR+0x14>
      d8:	4d c0       	rjmp	.+154    	; 0x174 <GPIO_vSETPIN_DDR+0xae>
      da:	81 34       	cpi	r24, 0x41	; 65
      dc:	09 f0       	breq	.+2      	; 0xe0 <GPIO_vSETPIN_DDR+0x1a>
      de:	83 c0       	rjmp	.+262    	; 0x1e6 <GPIO_vSETPIN_DDR+0x120>
      e0:	0f c0       	rjmp	.+30     	; 0x100 <GPIO_vSETPIN_DDR+0x3a>
      e2:	82 36       	cpi	r24, 0x62	; 98
      e4:	51 f1       	breq	.+84     	; 0x13a <GPIO_vSETPIN_DDR+0x74>
      e6:	83 36       	cpi	r24, 0x63	; 99
      e8:	20 f4       	brcc	.+8      	; 0xf2 <GPIO_vSETPIN_DDR+0x2c>
      ea:	81 36       	cpi	r24, 0x61	; 97
      ec:	09 f0       	breq	.+2      	; 0xf0 <GPIO_vSETPIN_DDR+0x2a>
      ee:	7b c0       	rjmp	.+246    	; 0x1e6 <GPIO_vSETPIN_DDR+0x120>
      f0:	07 c0       	rjmp	.+14     	; 0x100 <GPIO_vSETPIN_DDR+0x3a>
      f2:	83 36       	cpi	r24, 0x63	; 99
      f4:	09 f4       	brne	.+2      	; 0xf8 <GPIO_vSETPIN_DDR+0x32>
      f6:	3e c0       	rjmp	.+124    	; 0x174 <GPIO_vSETPIN_DDR+0xae>
      f8:	84 36       	cpi	r24, 0x64	; 100
      fa:	09 f0       	breq	.+2      	; 0xfe <GPIO_vSETPIN_DDR+0x38>
      fc:	74 c0       	rjmp	.+232    	; 0x1e6 <GPIO_vSETPIN_DDR+0x120>
      fe:	57 c0       	rjmp	.+174    	; 0x1ae <GPIO_vSETPIN_DDR+0xe8>
		case 'A':
		case 'a':
			if (dir==OUTPUT){
     100:	41 30       	cpi	r20, 0x01	; 1
     102:	69 f4       	brne	.+26     	; 0x11e <GPIO_vSETPIN_DDR+0x58>
				SEt_BIT(XDDRA,pinnum);
     104:	2a b3       	in	r18, 0x1a	; 26
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	ac 01       	movw	r20, r24
     10c:	02 c0       	rjmp	.+4      	; 0x112 <GPIO_vSETPIN_DDR+0x4c>
     10e:	44 0f       	add	r20, r20
     110:	55 1f       	adc	r21, r21
     112:	6a 95       	dec	r22
     114:	e2 f7       	brpl	.-8      	; 0x10e <GPIO_vSETPIN_DDR+0x48>
     116:	ba 01       	movw	r22, r20
     118:	62 2b       	or	r22, r18
     11a:	6a bb       	out	0x1a, r22	; 26
     11c:	08 95       	ret
			}else{
				CLR_BIT(XDDRA,pinnum);
     11e:	2a b3       	in	r18, 0x1a	; 26
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	ac 01       	movw	r20, r24
     126:	02 c0       	rjmp	.+4      	; 0x12c <GPIO_vSETPIN_DDR+0x66>
     128:	44 0f       	add	r20, r20
     12a:	55 1f       	adc	r21, r21
     12c:	6a 95       	dec	r22
     12e:	e2 f7       	brpl	.-8      	; 0x128 <GPIO_vSETPIN_DDR+0x62>
     130:	ba 01       	movw	r22, r20
     132:	60 95       	com	r22
     134:	62 23       	and	r22, r18
     136:	6a bb       	out	0x1a, r22	; 26
     138:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if (dir==OUTPUT){
     13a:	41 30       	cpi	r20, 0x01	; 1
     13c:	69 f4       	brne	.+26     	; 0x158 <GPIO_vSETPIN_DDR+0x92>
				SEt_BIT(XDDRB,pinnum);
     13e:	27 b3       	in	r18, 0x17	; 23
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	ac 01       	movw	r20, r24
     146:	02 c0       	rjmp	.+4      	; 0x14c <GPIO_vSETPIN_DDR+0x86>
     148:	44 0f       	add	r20, r20
     14a:	55 1f       	adc	r21, r21
     14c:	6a 95       	dec	r22
     14e:	e2 f7       	brpl	.-8      	; 0x148 <GPIO_vSETPIN_DDR+0x82>
     150:	ba 01       	movw	r22, r20
     152:	62 2b       	or	r22, r18
     154:	67 bb       	out	0x17, r22	; 23
     156:	08 95       	ret
			}else{
				CLR_BIT(XDDRB,pinnum);
     158:	27 b3       	in	r18, 0x17	; 23
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	ac 01       	movw	r20, r24
     160:	02 c0       	rjmp	.+4      	; 0x166 <GPIO_vSETPIN_DDR+0xa0>
     162:	44 0f       	add	r20, r20
     164:	55 1f       	adc	r21, r21
     166:	6a 95       	dec	r22
     168:	e2 f7       	brpl	.-8      	; 0x162 <GPIO_vSETPIN_DDR+0x9c>
     16a:	ba 01       	movw	r22, r20
     16c:	60 95       	com	r22
     16e:	62 23       	and	r22, r18
     170:	67 bb       	out	0x17, r22	; 23
     172:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if (dir==OUTPUT){
     174:	41 30       	cpi	r20, 0x01	; 1
     176:	69 f4       	brne	.+26     	; 0x192 <GPIO_vSETPIN_DDR+0xcc>
				SEt_BIT(XDDRC,pinnum);
     178:	24 b3       	in	r18, 0x14	; 20
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	ac 01       	movw	r20, r24
     180:	02 c0       	rjmp	.+4      	; 0x186 <GPIO_vSETPIN_DDR+0xc0>
     182:	44 0f       	add	r20, r20
     184:	55 1f       	adc	r21, r21
     186:	6a 95       	dec	r22
     188:	e2 f7       	brpl	.-8      	; 0x182 <GPIO_vSETPIN_DDR+0xbc>
     18a:	ba 01       	movw	r22, r20
     18c:	62 2b       	or	r22, r18
     18e:	64 bb       	out	0x14, r22	; 20
     190:	08 95       	ret
			}else{
				CLR_BIT(XDDRC,pinnum);
     192:	24 b3       	in	r18, 0x14	; 20
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	ac 01       	movw	r20, r24
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <GPIO_vSETPIN_DDR+0xda>
     19c:	44 0f       	add	r20, r20
     19e:	55 1f       	adc	r21, r21
     1a0:	6a 95       	dec	r22
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <GPIO_vSETPIN_DDR+0xd6>
     1a4:	ba 01       	movw	r22, r20
     1a6:	60 95       	com	r22
     1a8:	62 23       	and	r22, r18
     1aa:	64 bb       	out	0x14, r22	; 20
     1ac:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if (dir==OUTPUT){
     1ae:	41 30       	cpi	r20, 0x01	; 1
     1b0:	69 f4       	brne	.+26     	; 0x1cc <GPIO_vSETPIN_DDR+0x106>
				SEt_BIT(XDDRD,pinnum);
     1b2:	21 b3       	in	r18, 0x11	; 17
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	ac 01       	movw	r20, r24
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <GPIO_vSETPIN_DDR+0xfa>
     1bc:	44 0f       	add	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	e2 f7       	brpl	.-8      	; 0x1bc <GPIO_vSETPIN_DDR+0xf6>
     1c4:	ba 01       	movw	r22, r20
     1c6:	62 2b       	or	r22, r18
     1c8:	61 bb       	out	0x11, r22	; 17
     1ca:	08 95       	ret
			}else{
				CLR_BIT(XDDRD,pinnum);
     1cc:	21 b3       	in	r18, 0x11	; 17
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	ac 01       	movw	r20, r24
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <GPIO_vSETPIN_DDR+0x114>
     1d6:	44 0f       	add	r20, r20
     1d8:	55 1f       	adc	r21, r21
     1da:	6a 95       	dec	r22
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <GPIO_vSETPIN_DDR+0x110>
     1de:	ba 01       	movw	r22, r20
     1e0:	60 95       	com	r22
     1e2:	62 23       	and	r22, r18
     1e4:	61 bb       	out	0x11, r22	; 17
     1e6:	08 95       	ret

000001e8 <GPIO_vSETPORT_DDR>:
			}
			break;
	}
}
void GPIO_vSETPORT_DDR(u_int8 portnum, u_int8 dir){
	switch(portnum){
     1e8:	84 34       	cpi	r24, 0x44	; 68
     1ea:	d9 f0       	breq	.+54     	; 0x222 <GPIO_vSETPORT_DDR+0x3a>
     1ec:	85 34       	cpi	r24, 0x45	; 69
     1ee:	38 f4       	brcc	.+14     	; 0x1fe <GPIO_vSETPORT_DDR+0x16>
     1f0:	82 34       	cpi	r24, 0x42	; 66
     1f2:	99 f0       	breq	.+38     	; 0x21a <GPIO_vSETPORT_DDR+0x32>
     1f4:	83 34       	cpi	r24, 0x43	; 67
     1f6:	98 f4       	brcc	.+38     	; 0x21e <GPIO_vSETPORT_DDR+0x36>
     1f8:	81 34       	cpi	r24, 0x41	; 65
     1fa:	a1 f4       	brne	.+40     	; 0x224 <GPIO_vSETPORT_DDR+0x3c>
     1fc:	0c c0       	rjmp	.+24     	; 0x216 <GPIO_vSETPORT_DDR+0x2e>
     1fe:	82 36       	cpi	r24, 0x62	; 98
     200:	61 f0       	breq	.+24     	; 0x21a <GPIO_vSETPORT_DDR+0x32>
     202:	83 36       	cpi	r24, 0x63	; 99
     204:	18 f4       	brcc	.+6      	; 0x20c <GPIO_vSETPORT_DDR+0x24>
     206:	81 36       	cpi	r24, 0x61	; 97
     208:	69 f4       	brne	.+26     	; 0x224 <GPIO_vSETPORT_DDR+0x3c>
     20a:	05 c0       	rjmp	.+10     	; 0x216 <GPIO_vSETPORT_DDR+0x2e>
     20c:	83 36       	cpi	r24, 0x63	; 99
     20e:	39 f0       	breq	.+14     	; 0x21e <GPIO_vSETPORT_DDR+0x36>
     210:	84 36       	cpi	r24, 0x64	; 100
     212:	41 f4       	brne	.+16     	; 0x224 <GPIO_vSETPORT_DDR+0x3c>
     214:	06 c0       	rjmp	.+12     	; 0x222 <GPIO_vSETPORT_DDR+0x3a>
		case 'A':
		case 'a':
			XDDRA=dir;
     216:	6a bb       	out	0x1a, r22	; 26
			break;
     218:	08 95       	ret
		case 'B':
		case 'b':
			XDDRB=dir;
     21a:	67 bb       	out	0x17, r22	; 23
			break;
     21c:	08 95       	ret
		case 'C':
		case 'c':
			XDDRC=dir;
     21e:	64 bb       	out	0x14, r22	; 20
			break;
     220:	08 95       	ret
		case 'D':
		case 'd':
			XDDRD=dir;
     222:	61 bb       	out	0x11, r22	; 17
     224:	08 95       	ret

00000226 <GPIO_vWritePIN>:
			break;
	}
}

void GPIO_vWritePIN(u_int8 portnum , u_int8 pinnum , u_int8 val){
	switch(portnum){
     226:	84 34       	cpi	r24, 0x44	; 68
     228:	09 f4       	brne	.+2      	; 0x22c <GPIO_vWritePIN+0x6>
     22a:	71 c0       	rjmp	.+226    	; 0x30e <GPIO_vWritePIN+0xe8>
     22c:	85 34       	cpi	r24, 0x45	; 69
     22e:	48 f4       	brcc	.+18     	; 0x242 <GPIO_vWritePIN+0x1c>
     230:	82 34       	cpi	r24, 0x42	; 66
     232:	99 f1       	breq	.+102    	; 0x29a <GPIO_vWritePIN+0x74>
     234:	83 34       	cpi	r24, 0x43	; 67
     236:	08 f0       	brcs	.+2      	; 0x23a <GPIO_vWritePIN+0x14>
     238:	4d c0       	rjmp	.+154    	; 0x2d4 <GPIO_vWritePIN+0xae>
     23a:	81 34       	cpi	r24, 0x41	; 65
     23c:	09 f0       	breq	.+2      	; 0x240 <GPIO_vWritePIN+0x1a>
     23e:	83 c0       	rjmp	.+262    	; 0x346 <GPIO_vWritePIN+0x120>
     240:	0f c0       	rjmp	.+30     	; 0x260 <GPIO_vWritePIN+0x3a>
     242:	82 36       	cpi	r24, 0x62	; 98
     244:	51 f1       	breq	.+84     	; 0x29a <GPIO_vWritePIN+0x74>
     246:	83 36       	cpi	r24, 0x63	; 99
     248:	20 f4       	brcc	.+8      	; 0x252 <GPIO_vWritePIN+0x2c>
     24a:	81 36       	cpi	r24, 0x61	; 97
     24c:	09 f0       	breq	.+2      	; 0x250 <GPIO_vWritePIN+0x2a>
     24e:	7b c0       	rjmp	.+246    	; 0x346 <GPIO_vWritePIN+0x120>
     250:	07 c0       	rjmp	.+14     	; 0x260 <GPIO_vWritePIN+0x3a>
     252:	83 36       	cpi	r24, 0x63	; 99
     254:	09 f4       	brne	.+2      	; 0x258 <GPIO_vWritePIN+0x32>
     256:	3e c0       	rjmp	.+124    	; 0x2d4 <GPIO_vWritePIN+0xae>
     258:	84 36       	cpi	r24, 0x64	; 100
     25a:	09 f0       	breq	.+2      	; 0x25e <GPIO_vWritePIN+0x38>
     25c:	74 c0       	rjmp	.+232    	; 0x346 <GPIO_vWritePIN+0x120>
     25e:	57 c0       	rjmp	.+174    	; 0x30e <GPIO_vWritePIN+0xe8>
		case 'A':
		case 'a':
			if (val==HIGH){
     260:	41 30       	cpi	r20, 0x01	; 1
     262:	69 f4       	brne	.+26     	; 0x27e <GPIO_vWritePIN+0x58>
				SEt_BIT(XPORTA,pinnum);
     264:	2b b3       	in	r18, 0x1b	; 27
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	ac 01       	movw	r20, r24
     26c:	02 c0       	rjmp	.+4      	; 0x272 <GPIO_vWritePIN+0x4c>
     26e:	44 0f       	add	r20, r20
     270:	55 1f       	adc	r21, r21
     272:	6a 95       	dec	r22
     274:	e2 f7       	brpl	.-8      	; 0x26e <GPIO_vWritePIN+0x48>
     276:	ba 01       	movw	r22, r20
     278:	62 2b       	or	r22, r18
     27a:	6b bb       	out	0x1b, r22	; 27
     27c:	08 95       	ret
			}else{
				CLR_BIT(XPORTA,pinnum);
     27e:	2b b3       	in	r18, 0x1b	; 27
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	ac 01       	movw	r20, r24
     286:	02 c0       	rjmp	.+4      	; 0x28c <GPIO_vWritePIN+0x66>
     288:	44 0f       	add	r20, r20
     28a:	55 1f       	adc	r21, r21
     28c:	6a 95       	dec	r22
     28e:	e2 f7       	brpl	.-8      	; 0x288 <GPIO_vWritePIN+0x62>
     290:	ba 01       	movw	r22, r20
     292:	60 95       	com	r22
     294:	62 23       	and	r22, r18
     296:	6b bb       	out	0x1b, r22	; 27
     298:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if (val==HIGH){
     29a:	41 30       	cpi	r20, 0x01	; 1
     29c:	69 f4       	brne	.+26     	; 0x2b8 <GPIO_vWritePIN+0x92>
				SEt_BIT(XPORTB,pinnum);
     29e:	28 b3       	in	r18, 0x18	; 24
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	ac 01       	movw	r20, r24
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <GPIO_vWritePIN+0x86>
     2a8:	44 0f       	add	r20, r20
     2aa:	55 1f       	adc	r21, r21
     2ac:	6a 95       	dec	r22
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <GPIO_vWritePIN+0x82>
     2b0:	ba 01       	movw	r22, r20
     2b2:	62 2b       	or	r22, r18
     2b4:	68 bb       	out	0x18, r22	; 24
     2b6:	08 95       	ret
			}else{
				CLR_BIT(XPORTB,pinnum);
     2b8:	28 b3       	in	r18, 0x18	; 24
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	ac 01       	movw	r20, r24
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <GPIO_vWritePIN+0xa0>
     2c2:	44 0f       	add	r20, r20
     2c4:	55 1f       	adc	r21, r21
     2c6:	6a 95       	dec	r22
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <GPIO_vWritePIN+0x9c>
     2ca:	ba 01       	movw	r22, r20
     2cc:	60 95       	com	r22
     2ce:	62 23       	and	r22, r18
     2d0:	68 bb       	out	0x18, r22	; 24
     2d2:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if (val==HIGH){
     2d4:	41 30       	cpi	r20, 0x01	; 1
     2d6:	69 f4       	brne	.+26     	; 0x2f2 <GPIO_vWritePIN+0xcc>
				SEt_BIT(XPORTC,pinnum);
     2d8:	25 b3       	in	r18, 0x15	; 21
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	ac 01       	movw	r20, r24
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <GPIO_vWritePIN+0xc0>
     2e2:	44 0f       	add	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	6a 95       	dec	r22
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <GPIO_vWritePIN+0xbc>
     2ea:	ba 01       	movw	r22, r20
     2ec:	62 2b       	or	r22, r18
     2ee:	65 bb       	out	0x15, r22	; 21
     2f0:	08 95       	ret
			}else{
				CLR_BIT(XPORTC,pinnum);
     2f2:	25 b3       	in	r18, 0x15	; 21
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	ac 01       	movw	r20, r24
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <GPIO_vWritePIN+0xda>
     2fc:	44 0f       	add	r20, r20
     2fe:	55 1f       	adc	r21, r21
     300:	6a 95       	dec	r22
     302:	e2 f7       	brpl	.-8      	; 0x2fc <GPIO_vWritePIN+0xd6>
     304:	ba 01       	movw	r22, r20
     306:	60 95       	com	r22
     308:	62 23       	and	r22, r18
     30a:	65 bb       	out	0x15, r22	; 21
     30c:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if (val==HIGH){
     30e:	41 30       	cpi	r20, 0x01	; 1
     310:	69 f4       	brne	.+26     	; 0x32c <GPIO_vWritePIN+0x106>
				SEt_BIT(XPORTD,pinnum);
     312:	22 b3       	in	r18, 0x12	; 18
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	ac 01       	movw	r20, r24
     31a:	02 c0       	rjmp	.+4      	; 0x320 <GPIO_vWritePIN+0xfa>
     31c:	44 0f       	add	r20, r20
     31e:	55 1f       	adc	r21, r21
     320:	6a 95       	dec	r22
     322:	e2 f7       	brpl	.-8      	; 0x31c <GPIO_vWritePIN+0xf6>
     324:	ba 01       	movw	r22, r20
     326:	62 2b       	or	r22, r18
     328:	62 bb       	out	0x12, r22	; 18
     32a:	08 95       	ret
			}else{
				CLR_BIT(XPORTD,pinnum);
     32c:	22 b3       	in	r18, 0x12	; 18
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	ac 01       	movw	r20, r24
     334:	02 c0       	rjmp	.+4      	; 0x33a <GPIO_vWritePIN+0x114>
     336:	44 0f       	add	r20, r20
     338:	55 1f       	adc	r21, r21
     33a:	6a 95       	dec	r22
     33c:	e2 f7       	brpl	.-8      	; 0x336 <GPIO_vWritePIN+0x110>
     33e:	ba 01       	movw	r22, r20
     340:	60 95       	com	r22
     342:	62 23       	and	r22, r18
     344:	62 bb       	out	0x12, r22	; 18
     346:	08 95       	ret

00000348 <GPIO_vWritePORT>:
			}
			break;
	}
}
void GPIO_vWritePORT(u_int8 portnum , u_int8 val){
	switch(portnum){
     348:	84 34       	cpi	r24, 0x44	; 68
     34a:	d9 f0       	breq	.+54     	; 0x382 <GPIO_vWritePORT+0x3a>
     34c:	85 34       	cpi	r24, 0x45	; 69
     34e:	38 f4       	brcc	.+14     	; 0x35e <GPIO_vWritePORT+0x16>
     350:	82 34       	cpi	r24, 0x42	; 66
     352:	99 f0       	breq	.+38     	; 0x37a <GPIO_vWritePORT+0x32>
     354:	83 34       	cpi	r24, 0x43	; 67
     356:	98 f4       	brcc	.+38     	; 0x37e <GPIO_vWritePORT+0x36>
     358:	81 34       	cpi	r24, 0x41	; 65
     35a:	a1 f4       	brne	.+40     	; 0x384 <GPIO_vWritePORT+0x3c>
     35c:	0c c0       	rjmp	.+24     	; 0x376 <GPIO_vWritePORT+0x2e>
     35e:	82 36       	cpi	r24, 0x62	; 98
     360:	61 f0       	breq	.+24     	; 0x37a <GPIO_vWritePORT+0x32>
     362:	83 36       	cpi	r24, 0x63	; 99
     364:	18 f4       	brcc	.+6      	; 0x36c <GPIO_vWritePORT+0x24>
     366:	81 36       	cpi	r24, 0x61	; 97
     368:	69 f4       	brne	.+26     	; 0x384 <GPIO_vWritePORT+0x3c>
     36a:	05 c0       	rjmp	.+10     	; 0x376 <GPIO_vWritePORT+0x2e>
     36c:	83 36       	cpi	r24, 0x63	; 99
     36e:	39 f0       	breq	.+14     	; 0x37e <GPIO_vWritePORT+0x36>
     370:	84 36       	cpi	r24, 0x64	; 100
     372:	41 f4       	brne	.+16     	; 0x384 <GPIO_vWritePORT+0x3c>
     374:	06 c0       	rjmp	.+12     	; 0x382 <GPIO_vWritePORT+0x3a>
		case 'A':
		case 'a':
			XPORTA=val;
     376:	6b bb       	out	0x1b, r22	; 27
			break;
     378:	08 95       	ret
		case 'B':
		case 'b':
			XPORTB=val;
     37a:	68 bb       	out	0x18, r22	; 24
			break;
     37c:	08 95       	ret
		case 'C':
		case 'c':
			XPORTC=val;
     37e:	65 bb       	out	0x15, r22	; 21
			break;
     380:	08 95       	ret
		case 'D':
		case 'd':
			XPORTD=val;
     382:	62 bb       	out	0x12, r22	; 18
     384:	08 95       	ret

00000386 <GPIO_u8ReadPIN>:
			break;
	}
}
u_int8 GPIO_u8ReadPIN(u_int8 portnum , u_int8 pinnum){
	u_int8 ret;
	switch(portnum){
     386:	84 34       	cpi	r24, 0x44	; 68
     388:	09 f4       	brne	.+2      	; 0x38c <GPIO_u8ReadPIN+0x6>
     38a:	51 c0       	rjmp	.+162    	; 0x42e <GPIO_u8ReadPIN+0xa8>
     38c:	85 34       	cpi	r24, 0x45	; 69
     38e:	40 f4       	brcc	.+16     	; 0x3a0 <GPIO_u8ReadPIN+0x1a>
     390:	82 34       	cpi	r24, 0x42	; 66
     392:	39 f1       	breq	.+78     	; 0x3e2 <GPIO_u8ReadPIN+0x5c>
     394:	83 34       	cpi	r24, 0x43	; 67
     396:	c0 f5       	brcc	.+112    	; 0x408 <GPIO_u8ReadPIN+0x82>
     398:	81 34       	cpi	r24, 0x41	; 65
     39a:	09 f0       	breq	.+2      	; 0x39e <GPIO_u8ReadPIN+0x18>
     39c:	5a c0       	rjmp	.+180    	; 0x452 <GPIO_u8ReadPIN+0xcc>
     39e:	0e c0       	rjmp	.+28     	; 0x3bc <GPIO_u8ReadPIN+0x36>
     3a0:	82 36       	cpi	r24, 0x62	; 98
     3a2:	f9 f0       	breq	.+62     	; 0x3e2 <GPIO_u8ReadPIN+0x5c>
     3a4:	83 36       	cpi	r24, 0x63	; 99
     3a6:	20 f4       	brcc	.+8      	; 0x3b0 <GPIO_u8ReadPIN+0x2a>
     3a8:	81 36       	cpi	r24, 0x61	; 97
     3aa:	09 f0       	breq	.+2      	; 0x3ae <GPIO_u8ReadPIN+0x28>
     3ac:	52 c0       	rjmp	.+164    	; 0x452 <GPIO_u8ReadPIN+0xcc>
     3ae:	06 c0       	rjmp	.+12     	; 0x3bc <GPIO_u8ReadPIN+0x36>
     3b0:	83 36       	cpi	r24, 0x63	; 99
     3b2:	51 f1       	breq	.+84     	; 0x408 <GPIO_u8ReadPIN+0x82>
     3b4:	84 36       	cpi	r24, 0x64	; 100
     3b6:	09 f0       	breq	.+2      	; 0x3ba <GPIO_u8ReadPIN+0x34>
     3b8:	4c c0       	rjmp	.+152    	; 0x452 <GPIO_u8ReadPIN+0xcc>
     3ba:	39 c0       	rjmp	.+114    	; 0x42e <GPIO_u8ReadPIN+0xa8>
		case 'A':
		case 'a':
			ret=Read_Bit(XPINA,pinnum);
     3bc:	29 b3       	in	r18, 0x19	; 25
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	06 2e       	mov	r0, r22
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <GPIO_u8ReadPIN+0x44>
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	0a 94       	dec	r0
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <GPIO_u8ReadPIN+0x40>
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	82 23       	and	r24, r18
     3d2:	93 23       	and	r25, r19
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <GPIO_u8ReadPIN+0x54>
     3d6:	95 95       	asr	r25
     3d8:	87 95       	ror	r24
     3da:	6a 95       	dec	r22
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <GPIO_u8ReadPIN+0x50>
     3de:	98 2f       	mov	r25, r24
			break;
     3e0:	38 c0       	rjmp	.+112    	; 0x452 <GPIO_u8ReadPIN+0xcc>
		case 'B':
		case 'b':
			ret=Read_Bit(XPINB,pinnum);
     3e2:	26 b3       	in	r18, 0x16	; 22
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	06 2e       	mov	r0, r22
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <GPIO_u8ReadPIN+0x6a>
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <GPIO_u8ReadPIN+0x66>
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	82 23       	and	r24, r18
     3f8:	93 23       	and	r25, r19
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <GPIO_u8ReadPIN+0x7a>
     3fc:	95 95       	asr	r25
     3fe:	87 95       	ror	r24
     400:	6a 95       	dec	r22
     402:	e2 f7       	brpl	.-8      	; 0x3fc <GPIO_u8ReadPIN+0x76>
     404:	98 2f       	mov	r25, r24
			break;
     406:	25 c0       	rjmp	.+74     	; 0x452 <GPIO_u8ReadPIN+0xcc>
		case 'C':
		case 'c':
			ret=Read_Bit(XPINC,pinnum);
     408:	23 b3       	in	r18, 0x13	; 19
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	06 2e       	mov	r0, r22
     410:	02 c0       	rjmp	.+4      	; 0x416 <GPIO_u8ReadPIN+0x90>
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	0a 94       	dec	r0
     418:	e2 f7       	brpl	.-8      	; 0x412 <GPIO_u8ReadPIN+0x8c>
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	82 23       	and	r24, r18
     41e:	93 23       	and	r25, r19
     420:	02 c0       	rjmp	.+4      	; 0x426 <GPIO_u8ReadPIN+0xa0>
     422:	95 95       	asr	r25
     424:	87 95       	ror	r24
     426:	6a 95       	dec	r22
     428:	e2 f7       	brpl	.-8      	; 0x422 <GPIO_u8ReadPIN+0x9c>
     42a:	98 2f       	mov	r25, r24
			break;
     42c:	12 c0       	rjmp	.+36     	; 0x452 <GPIO_u8ReadPIN+0xcc>
		case 'D':
		case 'd':
			ret=Read_Bit(XPIND,pinnum);
     42e:	20 b3       	in	r18, 0x10	; 16
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	06 2e       	mov	r0, r22
     436:	02 c0       	rjmp	.+4      	; 0x43c <GPIO_u8ReadPIN+0xb6>
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	0a 94       	dec	r0
     43e:	e2 f7       	brpl	.-8      	; 0x438 <GPIO_u8ReadPIN+0xb2>
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	82 23       	and	r24, r18
     444:	93 23       	and	r25, r19
     446:	02 c0       	rjmp	.+4      	; 0x44c <GPIO_u8ReadPIN+0xc6>
     448:	95 95       	asr	r25
     44a:	87 95       	ror	r24
     44c:	6a 95       	dec	r22
     44e:	e2 f7       	brpl	.-8      	; 0x448 <GPIO_u8ReadPIN+0xc2>
     450:	98 2f       	mov	r25, r24
			break;
	}	
	return ret;
}
     452:	89 2f       	mov	r24, r25
     454:	08 95       	ret

00000456 <GPIO_u8ReadPORT>:
u_int8 GPIO_u8ReadPORT(u_int8 portnum){
	u_int8 ret;
	switch(portnum){
     456:	84 34       	cpi	r24, 0x44	; 68
     458:	d9 f0       	breq	.+54     	; 0x490 <GPIO_u8ReadPORT+0x3a>
     45a:	85 34       	cpi	r24, 0x45	; 69
     45c:	38 f4       	brcc	.+14     	; 0x46c <GPIO_u8ReadPORT+0x16>
     45e:	82 34       	cpi	r24, 0x42	; 66
     460:	99 f0       	breq	.+38     	; 0x488 <GPIO_u8ReadPORT+0x32>
     462:	83 34       	cpi	r24, 0x43	; 67
     464:	98 f4       	brcc	.+38     	; 0x48c <GPIO_u8ReadPORT+0x36>
     466:	81 34       	cpi	r24, 0x41	; 65
     468:	a1 f4       	brne	.+40     	; 0x492 <GPIO_u8ReadPORT+0x3c>
     46a:	0c c0       	rjmp	.+24     	; 0x484 <GPIO_u8ReadPORT+0x2e>
     46c:	82 36       	cpi	r24, 0x62	; 98
     46e:	61 f0       	breq	.+24     	; 0x488 <GPIO_u8ReadPORT+0x32>
     470:	83 36       	cpi	r24, 0x63	; 99
     472:	18 f4       	brcc	.+6      	; 0x47a <GPIO_u8ReadPORT+0x24>
     474:	81 36       	cpi	r24, 0x61	; 97
     476:	69 f4       	brne	.+26     	; 0x492 <GPIO_u8ReadPORT+0x3c>
     478:	05 c0       	rjmp	.+10     	; 0x484 <GPIO_u8ReadPORT+0x2e>
     47a:	83 36       	cpi	r24, 0x63	; 99
     47c:	39 f0       	breq	.+14     	; 0x48c <GPIO_u8ReadPORT+0x36>
     47e:	84 36       	cpi	r24, 0x64	; 100
     480:	41 f4       	brne	.+16     	; 0x492 <GPIO_u8ReadPORT+0x3c>
     482:	06 c0       	rjmp	.+12     	; 0x490 <GPIO_u8ReadPORT+0x3a>
		case 'A':
		case 'a':
			ret=XPINA;
     484:	99 b3       	in	r25, 0x19	; 25
			break;
     486:	05 c0       	rjmp	.+10     	; 0x492 <GPIO_u8ReadPORT+0x3c>
		case 'B':
		case 'b':
			ret=XPINB;
     488:	96 b3       	in	r25, 0x16	; 22
			break;
     48a:	03 c0       	rjmp	.+6      	; 0x492 <GPIO_u8ReadPORT+0x3c>
		case 'C':
		case 'c':
			ret=XPINC;
     48c:	93 b3       	in	r25, 0x13	; 19
			break;
     48e:	01 c0       	rjmp	.+2      	; 0x492 <GPIO_u8ReadPORT+0x3c>
		case 'D':
		case 'd':
			ret=XPIND;
     490:	90 b3       	in	r25, 0x10	; 16
			break;
	}
return ret;
}
     492:	89 2f       	mov	r24, r25
     494:	08 95       	ret

00000496 <GPIO_vInternal_pullupON>:
void GPIO_vInternal_pullupON(u_int8 portnum , u_int8 pinnum){
	GPIO_vWritePIN(portnum,pinnum,1);
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
}
     49c:	08 95       	ret

0000049e <GPIO_vInternal_pullupOFF>:
void GPIO_vInternal_pullupOFF(u_int8 portnum , u_int8 pinnum){
	GPIO_vWritePIN(portnum,pinnum,0);
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
}
     4a4:	08 95       	ret

000004a6 <GPIO_vLow_Nibble_set_DDR>:
void GPIO_vLow_Nibble_set_DDR(u_int8 portnum, u_int8 dir){
     4a6:	cf 93       	push	r28
     4a8:	c8 2f       	mov	r28, r24
	if (dir == OUTPUT){
     4aa:	61 30       	cpi	r22, 0x01	; 1
     4ac:	a1 f4       	brne	.+40     	; 0x4d6 <GPIO_vLow_Nibble_set_DDR+0x30>
		GPIO_vSETPIN_DDR(portnum,0,OUTPUT);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	41 e0       	ldi	r20, 0x01	; 1
     4b2:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,1,OUTPUT);
     4b6:	8c 2f       	mov	r24, r28
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	41 e0       	ldi	r20, 0x01	; 1
     4bc:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,2,OUTPUT);
     4c0:	8c 2f       	mov	r24, r28
     4c2:	62 e0       	ldi	r22, 0x02	; 2
     4c4:	41 e0       	ldi	r20, 0x01	; 1
     4c6:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,3,OUTPUT);
     4ca:	8c 2f       	mov	r24, r28
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
     4d4:	13 c0       	rjmp	.+38     	; 0x4fc <GPIO_vLow_Nibble_set_DDR+0x56>
	}else{
		GPIO_vSETPIN_DDR(portnum,0,INPUT);
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,1,INPUT);
     4de:	8c 2f       	mov	r24, r28
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,2,INPUT);
     4e8:	8c 2f       	mov	r24, r28
     4ea:	62 e0       	ldi	r22, 0x02	; 2
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,3,INPUT);
     4f2:	8c 2f       	mov	r24, r28
     4f4:	63 e0       	ldi	r22, 0x03	; 3
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
	}
}
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <GPIO_vLow_Nibble_write>:
void GPIO_vLow_Nibble_write(u_int8 portnum, u_int8 val){
	val &= 0x0f;   
     500:	6f 70       	andi	r22, 0x0F	; 15
	switch(portnum){
     502:	84 34       	cpi	r24, 0x44	; 68
     504:	51 f1       	breq	.+84     	; 0x55a <GPIO_vLow_Nibble_write+0x5a>
     506:	85 34       	cpi	r24, 0x45	; 69
     508:	38 f4       	brcc	.+14     	; 0x518 <GPIO_vLow_Nibble_write+0x18>
     50a:	82 34       	cpi	r24, 0x42	; 66
     50c:	c1 f0       	breq	.+48     	; 0x53e <GPIO_vLow_Nibble_write+0x3e>
     50e:	83 34       	cpi	r24, 0x43	; 67
     510:	e8 f4       	brcc	.+58     	; 0x54c <GPIO_vLow_Nibble_write+0x4c>
     512:	81 34       	cpi	r24, 0x41	; 65
     514:	41 f5       	brne	.+80     	; 0x566 <GPIO_vLow_Nibble_write+0x66>
     516:	0c c0       	rjmp	.+24     	; 0x530 <GPIO_vLow_Nibble_write+0x30>
     518:	82 36       	cpi	r24, 0x62	; 98
     51a:	89 f0       	breq	.+34     	; 0x53e <GPIO_vLow_Nibble_write+0x3e>
     51c:	83 36       	cpi	r24, 0x63	; 99
     51e:	18 f4       	brcc	.+6      	; 0x526 <GPIO_vLow_Nibble_write+0x26>
     520:	81 36       	cpi	r24, 0x61	; 97
     522:	09 f5       	brne	.+66     	; 0x566 <GPIO_vLow_Nibble_write+0x66>
     524:	05 c0       	rjmp	.+10     	; 0x530 <GPIO_vLow_Nibble_write+0x30>
     526:	83 36       	cpi	r24, 0x63	; 99
     528:	89 f0       	breq	.+34     	; 0x54c <GPIO_vLow_Nibble_write+0x4c>
     52a:	84 36       	cpi	r24, 0x64	; 100
     52c:	e1 f4       	brne	.+56     	; 0x566 <GPIO_vLow_Nibble_write+0x66>
     52e:	15 c0       	rjmp	.+42     	; 0x55a <GPIO_vLow_Nibble_write+0x5a>
		case 'A':
		case 'a':
			XPORTA &= 0xf0;   
     530:	8b b3       	in	r24, 0x1b	; 27
     532:	80 7f       	andi	r24, 0xF0	; 240
     534:	8b bb       	out	0x1b, r24	; 27
			XPORTA |=val;
     536:	8b b3       	in	r24, 0x1b	; 27
     538:	68 2b       	or	r22, r24
     53a:	6b bb       	out	0x1b, r22	; 27
			break;	
     53c:	08 95       	ret
		case 'B':
		case 'b':
			XPORTB &= 0xf0;
     53e:	88 b3       	in	r24, 0x18	; 24
     540:	80 7f       	andi	r24, 0xF0	; 240
     542:	88 bb       	out	0x18, r24	; 24
			XPORTB |=val;
     544:	88 b3       	in	r24, 0x18	; 24
     546:	68 2b       	or	r22, r24
     548:	68 bb       	out	0x18, r22	; 24
			break;
     54a:	08 95       	ret
		case 'C':
		case 'c':
			XPORTC &= 0xf0;
     54c:	85 b3       	in	r24, 0x15	; 21
     54e:	80 7f       	andi	r24, 0xF0	; 240
     550:	85 bb       	out	0x15, r24	; 21
			XPORTC |=val;
     552:	85 b3       	in	r24, 0x15	; 21
     554:	68 2b       	or	r22, r24
     556:	65 bb       	out	0x15, r22	; 21
			break;
     558:	08 95       	ret
		case 'D':
		case 'd':
			XPORTD &= 0xf0;
     55a:	82 b3       	in	r24, 0x12	; 18
     55c:	80 7f       	andi	r24, 0xF0	; 240
     55e:	82 bb       	out	0x12, r24	; 18
			XPORTD |=val;
     560:	82 b3       	in	r24, 0x12	; 18
     562:	68 2b       	or	r22, r24
     564:	62 bb       	out	0x12, r22	; 18
     566:	08 95       	ret

00000568 <GPIO_vHigh_Nibble_set_DDR>:
			break;
	}
}
void GPIO_vHigh_Nibble_set_DDR(u_int8 portnum, u_int8 dir){
     568:	cf 93       	push	r28
     56a:	c8 2f       	mov	r28, r24
	if (dir == OUTPUT){
     56c:	61 30       	cpi	r22, 0x01	; 1
     56e:	a1 f4       	brne	.+40     	; 0x598 <GPIO_vHigh_Nibble_set_DDR+0x30>
		GPIO_vSETPIN_DDR(portnum,4,OUTPUT);
     570:	64 e0       	ldi	r22, 0x04	; 4
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,5,OUTPUT);
     578:	8c 2f       	mov	r24, r28
     57a:	65 e0       	ldi	r22, 0x05	; 5
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,6,OUTPUT);
     582:	8c 2f       	mov	r24, r28
     584:	66 e0       	ldi	r22, 0x06	; 6
     586:	41 e0       	ldi	r20, 0x01	; 1
     588:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,7,OUTPUT);
     58c:	8c 2f       	mov	r24, r28
     58e:	67 e0       	ldi	r22, 0x07	; 7
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
     596:	13 c0       	rjmp	.+38     	; 0x5be <GPIO_vHigh_Nibble_set_DDR+0x56>
	}else{
		GPIO_vSETPIN_DDR(portnum,4,INPUT);
     598:	64 e0       	ldi	r22, 0x04	; 4
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,5,INPUT);
     5a0:	8c 2f       	mov	r24, r28
     5a2:	65 e0       	ldi	r22, 0x05	; 5
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,6,INPUT);
     5aa:	8c 2f       	mov	r24, r28
     5ac:	66 e0       	ldi	r22, 0x06	; 6
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(portnum,7,INPUT);
     5b4:	8c 2f       	mov	r24, r28
     5b6:	67 e0       	ldi	r22, 0x07	; 7
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
	}
}
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <GPIO_vHigh_Nibble_write>:
void GPIO_vHigh_Nibble_write(u_int8 portnum, u_int8 val){
	val &=0xf0;
     5c2:	60 7f       	andi	r22, 0xF0	; 240
	switch(portnum){
     5c4:	84 34       	cpi	r24, 0x44	; 68
     5c6:	51 f1       	breq	.+84     	; 0x61c <GPIO_vHigh_Nibble_write+0x5a>
     5c8:	85 34       	cpi	r24, 0x45	; 69
     5ca:	38 f4       	brcc	.+14     	; 0x5da <GPIO_vHigh_Nibble_write+0x18>
     5cc:	82 34       	cpi	r24, 0x42	; 66
     5ce:	c1 f0       	breq	.+48     	; 0x600 <GPIO_vHigh_Nibble_write+0x3e>
     5d0:	83 34       	cpi	r24, 0x43	; 67
     5d2:	e8 f4       	brcc	.+58     	; 0x60e <GPIO_vHigh_Nibble_write+0x4c>
     5d4:	81 34       	cpi	r24, 0x41	; 65
     5d6:	41 f5       	brne	.+80     	; 0x628 <GPIO_vHigh_Nibble_write+0x66>
     5d8:	0c c0       	rjmp	.+24     	; 0x5f2 <GPIO_vHigh_Nibble_write+0x30>
     5da:	82 36       	cpi	r24, 0x62	; 98
     5dc:	89 f0       	breq	.+34     	; 0x600 <GPIO_vHigh_Nibble_write+0x3e>
     5de:	83 36       	cpi	r24, 0x63	; 99
     5e0:	18 f4       	brcc	.+6      	; 0x5e8 <GPIO_vHigh_Nibble_write+0x26>
     5e2:	81 36       	cpi	r24, 0x61	; 97
     5e4:	09 f5       	brne	.+66     	; 0x628 <GPIO_vHigh_Nibble_write+0x66>
     5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <GPIO_vHigh_Nibble_write+0x30>
     5e8:	83 36       	cpi	r24, 0x63	; 99
     5ea:	89 f0       	breq	.+34     	; 0x60e <GPIO_vHigh_Nibble_write+0x4c>
     5ec:	84 36       	cpi	r24, 0x64	; 100
     5ee:	e1 f4       	brne	.+56     	; 0x628 <GPIO_vHigh_Nibble_write+0x66>
     5f0:	15 c0       	rjmp	.+42     	; 0x61c <GPIO_vHigh_Nibble_write+0x5a>
		case 'A':
		case 'a':
			XPORTA &= 0x0f;
     5f2:	8b b3       	in	r24, 0x1b	; 27
     5f4:	8f 70       	andi	r24, 0x0F	; 15
     5f6:	8b bb       	out	0x1b, r24	; 27
			XPORTA |=val;
     5f8:	8b b3       	in	r24, 0x1b	; 27
     5fa:	68 2b       	or	r22, r24
     5fc:	6b bb       	out	0x1b, r22	; 27
			break;
     5fe:	08 95       	ret
		case 'B':
		case 'b':
			XPORTB &= 0x0f;
     600:	88 b3       	in	r24, 0x18	; 24
     602:	8f 70       	andi	r24, 0x0F	; 15
     604:	88 bb       	out	0x18, r24	; 24
			XPORTB |=val;
     606:	88 b3       	in	r24, 0x18	; 24
     608:	68 2b       	or	r22, r24
     60a:	68 bb       	out	0x18, r22	; 24
			break;
     60c:	08 95       	ret
		case 'C':
		case 'c':
			XPORTC &= 0x0f;
     60e:	85 b3       	in	r24, 0x15	; 21
     610:	8f 70       	andi	r24, 0x0F	; 15
     612:	85 bb       	out	0x15, r24	; 21
			XPORTC |=val;
     614:	85 b3       	in	r24, 0x15	; 21
     616:	68 2b       	or	r22, r24
     618:	65 bb       	out	0x15, r22	; 21
			break;
     61a:	08 95       	ret
		case 'D':
		case 'd':
			XPORTD &= 0x0f;
     61c:	82 b3       	in	r24, 0x12	; 18
     61e:	8f 70       	andi	r24, 0x0F	; 15
     620:	82 bb       	out	0x12, r24	; 18
			XPORTD |=val;
     622:	82 b3       	in	r24, 0x12	; 18
     624:	68 2b       	or	r22, r24
     626:	62 bb       	out	0x12, r22	; 18
     628:	08 95       	ret

0000062a <EEPROM_vWrite>:
 * Created: 7/12/2020 12:31:04 PM
 *  Author: Mahmoud Ayman
 */ 
#include "Internal_EEPROM_MCAL.h"
void EEPROM_vWrite(u_int16 address, u_int8 val){
	XEEARL=(u_int8)address;   
     62a:	8e bb       	out	0x1e, r24	; 30
	XEEARH=(u_int8)(address>>8);
     62c:	9f bb       	out	0x1f, r25	; 31
	XEEDR=val;
     62e:	6d bb       	out	0x1d, r22	; 29
	SEt_BIT(XEECR,EEMWE);
     630:	e2 9a       	sbi	0x1c, 2	; 28
	SEt_BIT(XEECR,EEWE);
     632:	e1 9a       	sbi	0x1c, 1	; 28
	while(Read_Bit(XEECR,EEWE)==1);
     634:	e1 99       	sbic	0x1c, 1	; 28
     636:	fe cf       	rjmp	.-4      	; 0x634 <EEPROM_vWrite+0xa>
}
     638:	08 95       	ret

0000063a <EEPROM_u8Read>:

u_int8 EEPROM_u8Read(u_int16 address){
	XEEARL=(u_int8)address;
     63a:	8e bb       	out	0x1e, r24	; 30
	XEEARH=(u_int8)(address>>8);
     63c:	9f bb       	out	0x1f, r25	; 31
	SEt_BIT(XEECR,EERE);
     63e:	e0 9a       	sbi	0x1c, 0	; 28
	return XEEDR;
     640:	8d b3       	in	r24, 0x1d	; 29
     642:	08 95       	ret

00000644 <Keypad_vInit>:
 *
 * Created: 7/19/2020 7:35:54 PM
 *  Author: Mahmoud Ayman
 */ 
#include "Keypad_ECU.h"
void Keypad_vInit(u_int8 port){
     644:	cf 93       	push	r28
     646:	c8 2f       	mov	r28, r24
	GPIO_vSETPORT_DDR(port,0x0f); 
     648:	6f e0       	ldi	r22, 0x0F	; 15
     64a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vSETPORT_DDR>
	GPIO_vInternal_pullupON(port,4);
     64e:	8c 2f       	mov	r24, r28
     650:	64 e0       	ldi	r22, 0x04	; 4
     652:	0e 94 4b 02 	call	0x496	; 0x496 <GPIO_vInternal_pullupON>
	GPIO_vInternal_pullupON(port,5);
     656:	8c 2f       	mov	r24, r28
     658:	65 e0       	ldi	r22, 0x05	; 5
     65a:	0e 94 4b 02 	call	0x496	; 0x496 <GPIO_vInternal_pullupON>
	GPIO_vInternal_pullupON(port,6);
     65e:	8c 2f       	mov	r24, r28
     660:	66 e0       	ldi	r22, 0x06	; 6
     662:	0e 94 4b 02 	call	0x496	; 0x496 <GPIO_vInternal_pullupON>
	GPIO_vInternal_pullupON(port,7);
     666:	8c 2f       	mov	r24, r28
     668:	67 e0       	ldi	r22, 0x07	; 7
     66a:	0e 94 4b 02 	call	0x496	; 0x496 <GPIO_vInternal_pullupON>
}
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <Keypad_u8check_press>:

u_int8 Keypad_u8check_press(u_int8 port){
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	60 97       	sbiw	r28, 0x10	; 16
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	08 2f       	mov	r16, r24
	//u_int8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}}; //real keypad
	u_int8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //proteus Keypad
     68e:	de 01       	movw	r26, r28
     690:	11 96       	adiw	r26, 0x01	; 1
     692:	e0 e6       	ldi	r30, 0x60	; 96
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 e1       	ldi	r24, 0x10	; 16
     698:	01 90       	ld	r0, Z+
     69a:	0d 92       	st	X+, r0
     69c:	81 50       	subi	r24, 0x01	; 1
     69e:	e1 f7       	brne	.-8      	; 0x698 <Keypad_u8check_press+0x26>
	u_int8 row , coloumn, x;
	u_int8 return_val= NOTPRESSED;
	for(row = 0; row < 4; row++){
     6a0:	ff 24       	eor	r15, r15
		GPIO_vWritePIN(port,0,1);
     6a2:	80 2f       	mov	r24, r16
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
		GPIO_vWritePIN(port,1,1);
     6ac:	80 2f       	mov	r24, r16
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
		GPIO_vWritePIN(port,2,1);
     6b6:	80 2f       	mov	r24, r16
     6b8:	62 e0       	ldi	r22, 0x02	; 2
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
		GPIO_vWritePIN(port,3,1);
     6c0:	80 2f       	mov	r24, r16
     6c2:	63 e0       	ldi	r22, 0x03	; 3
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
		GPIO_vWritePIN(port,row,0);
     6ca:	80 2f       	mov	r24, r16
     6cc:	6f 2d       	mov	r22, r15
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
		for(coloumn = 0; coloumn < 4; coloumn++){
     6d4:	10 e0       	ldi	r17, 0x00	; 0
			x=GPIO_u8ReadPIN(port,(coloumn + 4));
     6d6:	61 2f       	mov	r22, r17
     6d8:	6c 5f       	subi	r22, 0xFC	; 252
     6da:	80 2f       	mov	r24, r16
     6dc:	0e 94 c3 01 	call	0x386	; 0x386 <GPIO_u8ReadPIN>
			if(0 == x){
     6e0:	88 23       	and	r24, r24
     6e2:	61 f4       	brne	.+24     	; 0x6fc <Keypad_u8check_press+0x8a>
				return_val=arr[row][coloumn];
     6e4:	ef 2d       	mov	r30, r15
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	ee 0f       	add	r30, r30
     6ee:	ff 1f       	adc	r31, r31
     6f0:	e1 0f       	add	r30, r17
     6f2:	f1 1d       	adc	r31, r1
     6f4:	ec 0f       	add	r30, r28
     6f6:	fd 1f       	adc	r31, r29
     6f8:	81 81       	ldd	r24, Z+1	; 0x01
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <Keypad_u8check_press+0x92>
		GPIO_vWritePIN(port,0,1);
		GPIO_vWritePIN(port,1,1);
		GPIO_vWritePIN(port,2,1);
		GPIO_vWritePIN(port,3,1);
		GPIO_vWritePIN(port,row,0);
		for(coloumn = 0; coloumn < 4; coloumn++){
     6fc:	1f 5f       	subi	r17, 0xFF	; 255
     6fe:	14 30       	cpi	r17, 0x04	; 4
     700:	51 f7       	brne	.-44     	; 0x6d6 <Keypad_u8check_press+0x64>
     702:	0c c0       	rjmp	.+24     	; 0x71c <Keypad_u8check_press+0xaa>
		if(0==x){
			break;
		}
	}
	return return_val;
     704:	60 96       	adiw	r28, 0x10	; 16
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	08 95       	ret
u_int8 Keypad_u8check_press(u_int8 port){
	//u_int8 arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}}; //real keypad
	u_int8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //proteus Keypad
	u_int8 row , coloumn, x;
	u_int8 return_val= NOTPRESSED;
	for(row = 0; row < 4; row++){
     71c:	f3 94       	inc	r15
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	f8 16       	cp	r15, r24
     722:	09 f0       	breq	.+2      	; 0x726 <Keypad_u8check_press+0xb4>
     724:	be cf       	rjmp	.-132    	; 0x6a2 <Keypad_u8check_press+0x30>
     726:	8f ef       	ldi	r24, 0xFF	; 255
     728:	ed cf       	rjmp	.-38     	; 0x704 <Keypad_u8check_press+0x92>

0000072a <LCD_send_falling_edge>:
		}
	}
}

static void LCD_send_falling_edge(void){
	GPIO_vWritePIN(ip->EN_port,ip->EN_pin,1);
     72a:	e0 91 90 00 	lds	r30, 0x0090
     72e:	f0 91 91 00 	lds	r31, 0x0091
     732:	87 81       	ldd	r24, Z+7	; 0x07
     734:	60 85       	ldd	r22, Z+8	; 0x08
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73c:	8f e9       	ldi	r24, 0x9F	; 159
     73e:	9f e0       	ldi	r25, 0x0F	; 15
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <LCD_send_falling_edge+0x16>
     744:	00 c0       	rjmp	.+0      	; 0x746 <LCD_send_falling_edge+0x1c>
     746:	00 00       	nop
	_delay_ms(2);
	GPIO_vWritePIN(ip->EN_port,ip->EN_pin,0);
     748:	e0 91 90 00 	lds	r30, 0x0090
     74c:	f0 91 91 00 	lds	r31, 0x0091
     750:	87 81       	ldd	r24, Z+7	; 0x07
     752:	60 85       	ldd	r22, Z+8	; 0x08
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
}
     75a:	08 95       	ret

0000075c <LCD_Get_config>:
 *  Author: Mahmoud Ayman
 */ 
#include "LCD_ECU.h"

OBJ *ip;
void LCD_Get_config(OBJ *ptr, u_int8 mode, u_int8 nibble, u_int8 port, u_int8 Rs_port, u_int8 rs_pin, u_int8 rw_port, u_int8 rw_pin, u_int8 en_port, u_int8 en_pin){
     75c:	8f 92       	push	r8
     75e:	af 92       	push	r10
     760:	cf 92       	push	r12
     762:	ef 92       	push	r14
     764:	0f 93       	push	r16
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
	ip=ptr;
     76e:	90 93 91 00 	sts	0x0091, r25
     772:	80 93 90 00 	sts	0x0090, r24
	ip->Mode=mode;
     776:	fc 01       	movw	r30, r24
     778:	60 83       	st	Z, r22
	ip->Nibble=nibble;
     77a:	e0 91 90 00 	lds	r30, 0x0090
     77e:	f0 91 91 00 	lds	r31, 0x0091
     782:	41 83       	std	Z+1, r20	; 0x01
	ip->LCD_port=port;
     784:	e0 91 90 00 	lds	r30, 0x0090
     788:	f0 91 91 00 	lds	r31, 0x0091
     78c:	22 83       	std	Z+2, r18	; 0x02
	ip->RS_port=Rs_port;
     78e:	03 83       	std	Z+3, r16	; 0x03
	ip->RS_pin=rs_pin;
     790:	e4 82       	std	Z+4, r14	; 0x04
	ip->RW_port=rw_port;
     792:	c5 82       	std	Z+5, r12	; 0x05
	ip->RW_pin=rw_pin;
     794:	a6 82       	std	Z+6, r10	; 0x06
	ip->EN_port=en_port;
     796:	87 82       	std	Z+7, r8	; 0x07
	ip->EN_pin=en_pin;
     798:	8a 85       	ldd	r24, Y+10	; 0x0a
     79a:	80 87       	std	Z+8, r24	; 0x08
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	0f 91       	pop	r16
     7a2:	ef 90       	pop	r14
     7a4:	cf 90       	pop	r12
     7a6:	af 90       	pop	r10
     7a8:	8f 90       	pop	r8
     7aa:	08 95       	ret

000007ac <LCD_vsend_cmd>:
			}
		}
	}
}

void LCD_vsend_cmd(u_int8 cmd){
     7ac:	cf 93       	push	r28
     7ae:	c8 2f       	mov	r28, r24
	if(ip->Mode==EIGHT_BIT){
     7b0:	e0 91 90 00 	lds	r30, 0x0090
     7b4:	f0 91 91 00 	lds	r31, 0x0091
     7b8:	80 81       	ld	r24, Z
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	81 f4       	brne	.+32     	; 0x7de <LCD_vsend_cmd+0x32>
		GPIO_vWritePORT(ip->LCD_port,cmd);
     7be:	82 81       	ldd	r24, Z+2	; 0x02
     7c0:	6c 2f       	mov	r22, r28
     7c2:	0e 94 a4 01 	call	0x348	; 0x348 <GPIO_vWritePORT>
		GPIO_vWritePIN(ip->RS_port,ip->RS_pin,0);
     7c6:	e0 91 90 00 	lds	r30, 0x0090
     7ca:	f0 91 91 00 	lds	r31, 0x0091
     7ce:	83 81       	ldd	r24, Z+3	; 0x03
     7d0:	64 81       	ldd	r22, Z+4	; 0x04
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
		LCD_send_falling_edge();
     7d8:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
     7dc:	58 c0       	rjmp	.+176    	; 0x88e <__stack+0x2f>
	}else{
		if(ip->Nibble==HIGH_NIBBLE){
     7de:	81 81       	ldd	r24, Z+1	; 0x01
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	59 f5       	brne	.+86     	; 0x83a <LCD_vsend_cmd+0x8e>
			GPIO_vHigh_Nibble_write(ip->LCD_port,cmd>>4);  
     7e4:	6c 2f       	mov	r22, r28
     7e6:	62 95       	swap	r22
     7e8:	6f 70       	andi	r22, 0x0F	; 15
     7ea:	82 81       	ldd	r24, Z+2	; 0x02
     7ec:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GPIO_vHigh_Nibble_write>
			GPIO_vWritePIN(ip->RS_port,ip->RS_pin,0); 
     7f0:	e0 91 90 00 	lds	r30, 0x0090
     7f4:	f0 91 91 00 	lds	r31, 0x0091
     7f8:	83 81       	ldd	r24, Z+3	; 0x03
     7fa:	64 81       	ldd	r22, Z+4	; 0x04
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
			LCD_send_falling_edge();
     802:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
			GPIO_vHigh_Nibble_write(ip->LCD_port,cmd);
     806:	e0 91 90 00 	lds	r30, 0x0090
     80a:	f0 91 91 00 	lds	r31, 0x0091
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	6c 2f       	mov	r22, r28
     812:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GPIO_vHigh_Nibble_write>
			GPIO_vWritePIN(ip->RS_port,ip->RS_pin,0);
     816:	e0 91 90 00 	lds	r30, 0x0090
     81a:	f0 91 91 00 	lds	r31, 0x0091
     81e:	83 81       	ldd	r24, Z+3	; 0x03
     820:	64 81       	ldd	r22, Z+4	; 0x04
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
			LCD_send_falling_edge();
     828:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
     82c:	8f ec       	ldi	r24, 0xCF	; 207
     82e:	97 e0       	ldi	r25, 0x07	; 7
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <LCD_vsend_cmd+0x84>
     834:	00 c0       	rjmp	.+0      	; 0x836 <LCD_vsend_cmd+0x8a>
     836:	00 00       	nop
     838:	2a c0       	rjmp	.+84     	; 0x88e <__stack+0x2f>
			_delay_ms(1);
		}else{
			GPIO_vLow_Nibble_write(ip->LCD_port,cmd>>4);
     83a:	6c 2f       	mov	r22, r28
     83c:	62 95       	swap	r22
     83e:	6f 70       	andi	r22, 0x0F	; 15
     840:	82 81       	ldd	r24, Z+2	; 0x02
     842:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_vLow_Nibble_write>
			GPIO_vWritePIN(ip->RS_port,ip->RS_pin,0);
     846:	e0 91 90 00 	lds	r30, 0x0090
     84a:	f0 91 91 00 	lds	r31, 0x0091
     84e:	83 81       	ldd	r24, Z+3	; 0x03
     850:	64 81       	ldd	r22, Z+4	; 0x04
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
			LCD_send_falling_edge();
     858:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
			GPIO_vLow_Nibble_write(ip->LCD_port,cmd);
     85c:	e0 91 90 00 	lds	r30, 0x0090
     860:	f0 91 91 00 	lds	r31, 0x0091
     864:	82 81       	ldd	r24, Z+2	; 0x02
     866:	6c 2f       	mov	r22, r28
     868:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_vLow_Nibble_write>
			GPIO_vWritePIN(ip->RS_port,ip->RS_pin,0);
     86c:	e0 91 90 00 	lds	r30, 0x0090
     870:	f0 91 91 00 	lds	r31, 0x0091
     874:	83 81       	ldd	r24, Z+3	; 0x03
     876:	64 81       	ldd	r22, Z+4	; 0x04
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
			LCD_send_falling_edge();
     87e:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
     882:	8f ec       	ldi	r24, 0xCF	; 207
     884:	97 e0       	ldi	r25, 0x07	; 7
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <__stack+0x27>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <__stack+0x2d>
     88c:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <LCD_vInit>:
	ip->RW_pin=rw_pin;
	ip->EN_port=en_port;
	ip->EN_pin=en_pin;
}
void LCD_vInit(void){
	if(ip!=0){
     892:	80 91 90 00 	lds	r24, 0x0090
     896:	90 91 91 00 	lds	r25, 0x0091
     89a:	00 97       	sbiw	r24, 0x00	; 0
     89c:	09 f4       	brne	.+2      	; 0x8a0 <LCD_vInit+0xe>
     89e:	d5 c0       	rjmp	.+426    	; 0xa4a <LCD_vInit+0x1b8>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	91 ee       	ldi	r25, 0xE1	; 225
     8a4:	a4 e0       	ldi	r26, 0x04	; 4
     8a6:	81 50       	subi	r24, 0x01	; 1
     8a8:	90 40       	sbci	r25, 0x00	; 0
     8aa:	a0 40       	sbci	r26, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <LCD_vInit+0x14>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <LCD_vInit+0x1e>
     8b0:	00 00       	nop
		_delay_ms(200);
		GPIO_vSETPIN_DDR(ip->RS_port,ip->RS_pin,1);
     8b2:	e0 91 90 00 	lds	r30, 0x0090
     8b6:	f0 91 91 00 	lds	r31, 0x0091
     8ba:	83 81       	ldd	r24, Z+3	; 0x03
     8bc:	64 81       	ldd	r22, Z+4	; 0x04
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(ip->RW_port,ip->RW_pin,1);
     8c4:	e0 91 90 00 	lds	r30, 0x0090
     8c8:	f0 91 91 00 	lds	r31, 0x0091
     8cc:	85 81       	ldd	r24, Z+5	; 0x05
     8ce:	66 81       	ldd	r22, Z+6	; 0x06
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(ip->EN_port,ip->EN_pin,1);
     8d6:	e0 91 90 00 	lds	r30, 0x0090
     8da:	f0 91 91 00 	lds	r31, 0x0091
     8de:	87 81       	ldd	r24, Z+7	; 0x07
     8e0:	60 85       	ldd	r22, Z+8	; 0x08
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
		if(ip->Mode==EIGHT_BIT){
     8e8:	e0 91 90 00 	lds	r30, 0x0090
     8ec:	f0 91 91 00 	lds	r31, 0x0091
     8f0:	80 81       	ld	r24, Z
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	c1 f5       	brne	.+112    	; 0x966 <LCD_vInit+0xd4>
			GPIO_vSETPORT_DDR(ip->LCD_port,0xff);
     8f6:	82 81       	ldd	r24, Z+2	; 0x02
     8f8:	6f ef       	ldi	r22, 0xFF	; 255
     8fa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vSETPORT_DDR>
			GPIO_vWritePIN(ip->RW_port,ip->RW_pin,0);
     8fe:	e0 91 90 00 	lds	r30, 0x0090
     902:	f0 91 91 00 	lds	r31, 0x0091
     906:	85 81       	ldd	r24, Z+5	; 0x05
     908:	66 81       	ldd	r22, Z+6	; 0x06
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
     910:	af e2       	ldi	r26, 0x2F	; 47
     912:	b5 e7       	ldi	r27, 0x75	; 117
     914:	11 97       	sbiw	r26, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <LCD_vInit+0x82>
     918:	00 c0       	rjmp	.+0      	; 0x91a <LCD_vInit+0x88>
     91a:	00 00       	nop
			_delay_ms(15);
			LCD_vsend_cmd(LCD_8Bit_2Lines);
     91c:	88 e3       	ldi	r24, 0x38	; 56
     91e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     922:	8f ec       	ldi	r24, 0xCF	; 207
     924:	97 e0       	ldi	r25, 0x07	; 7
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <LCD_vInit+0x94>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <LCD_vInit+0x9a>
     92c:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(LCD_DISP_ON_CURSOR_ON);
     92e:	8e e0       	ldi	r24, 0x0E	; 14
     930:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     934:	af ec       	ldi	r26, 0xCF	; 207
     936:	b7 e0       	ldi	r27, 0x07	; 7
     938:	11 97       	sbiw	r26, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <LCD_vInit+0xa6>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <LCD_vInit+0xac>
     93e:	00 00       	nop
			_delay_ms(1);
			LCD_vsend_cmd(LCD_CLEAR_SCREEN);
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     946:	8f e1       	ldi	r24, 0x1F	; 31
     948:	9e e4       	ldi	r25, 0x4E	; 78
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <LCD_vInit+0xb8>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <LCD_vInit+0xbe>
     950:	00 00       	nop
			_delay_ms(10);
			LCD_vsend_cmd(LCD_ENTRY_MODE);
     952:	86 e0       	ldi	r24, 0x06	; 6
     954:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     958:	af ec       	ldi	r26, 0xCF	; 207
     95a:	b7 e0       	ldi	r27, 0x07	; 7
     95c:	11 97       	sbiw	r26, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <LCD_vInit+0xca>
     960:	00 c0       	rjmp	.+0      	; 0x962 <LCD_vInit+0xd0>
     962:	00 00       	nop
     964:	08 95       	ret
			_delay_ms(1);
		}else{
			if(ip->Nibble==HIGH_NIBBLE){
     966:	81 81       	ldd	r24, Z+1	; 0x01
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	c1 f5       	brne	.+112    	; 0x9dc <LCD_vInit+0x14a>
				GPIO_vHigh_Nibble_set_DDR(ip->LCD_port,1);
     96c:	82 81       	ldd	r24, Z+2	; 0x02
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	0e 94 b4 02 	call	0x568	; 0x568 <GPIO_vHigh_Nibble_set_DDR>
				GPIO_vWritePIN(ip->RW_port,ip->RW_pin,0);
     974:	e0 91 90 00 	lds	r30, 0x0090
     978:	f0 91 91 00 	lds	r31, 0x0091
     97c:	85 81       	ldd	r24, Z+5	; 0x05
     97e:	66 81       	ldd	r22, Z+6	; 0x06
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
     986:	8f e2       	ldi	r24, 0x2F	; 47
     988:	95 e7       	ldi	r25, 0x75	; 117
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <LCD_vInit+0xf8>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <LCD_vInit+0xfe>
     990:	00 00       	nop
				_delay_ms(15);
				LCD_vsend_cmd(LCD_4Bit_2Lines);
     992:	88 e2       	ldi	r24, 0x28	; 40
     994:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     998:	af ec       	ldi	r26, 0xCF	; 207
     99a:	b7 e0       	ldi	r27, 0x07	; 7
     99c:	11 97       	sbiw	r26, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <LCD_vInit+0x10a>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <LCD_vInit+0x110>
     9a2:	00 00       	nop
				_delay_ms(1);
				LCD_vsend_cmd(LCD_DISP_ON_CURSOR_ON);
     9a4:	8e e0       	ldi	r24, 0x0E	; 14
     9a6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     9aa:	8f ec       	ldi	r24, 0xCF	; 207
     9ac:	97 e0       	ldi	r25, 0x07	; 7
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <LCD_vInit+0x11c>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <LCD_vInit+0x122>
     9b4:	00 00       	nop
				_delay_ms(1);
				LCD_vsend_cmd(LCD_CLEAR_SCREEN);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     9bc:	af e1       	ldi	r26, 0x1F	; 31
     9be:	be e4       	ldi	r27, 0x4E	; 78
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <LCD_vInit+0x12e>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <LCD_vInit+0x134>
     9c6:	00 00       	nop
				_delay_ms(10);
				LCD_vsend_cmd(LCD_ENTRY_MODE);
     9c8:	86 e0       	ldi	r24, 0x06	; 6
     9ca:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     9ce:	8f ec       	ldi	r24, 0xCF	; 207
     9d0:	97 e0       	ldi	r25, 0x07	; 7
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <LCD_vInit+0x140>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <LCD_vInit+0x146>
     9d8:	00 00       	nop
     9da:	08 95       	ret
				_delay_ms(1);
			}else{
				GPIO_vLow_Nibble_set_DDR(ip->LCD_port,1);
     9dc:	82 81       	ldd	r24, Z+2	; 0x02
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <GPIO_vLow_Nibble_set_DDR>
				GPIO_vWritePIN(ip->RW_port,ip->RW_pin,0);
     9e4:	e0 91 90 00 	lds	r30, 0x0090
     9e8:	f0 91 91 00 	lds	r31, 0x0091
     9ec:	85 81       	ldd	r24, Z+5	; 0x05
     9ee:	66 81       	ldd	r22, Z+6	; 0x06
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
     9f6:	af e2       	ldi	r26, 0x2F	; 47
     9f8:	b5 e7       	ldi	r27, 0x75	; 117
     9fa:	11 97       	sbiw	r26, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <LCD_vInit+0x168>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <LCD_vInit+0x16e>
     a00:	00 00       	nop
				_delay_ms(15);
				LCD_vsend_cmd(LCD_4Bit_2Lines);
     a02:	88 e2       	ldi	r24, 0x28	; 40
     a04:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     a08:	8f ec       	ldi	r24, 0xCF	; 207
     a0a:	97 e0       	ldi	r25, 0x07	; 7
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <LCD_vInit+0x17a>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <LCD_vInit+0x180>
     a12:	00 00       	nop
				_delay_ms(1);
				LCD_vsend_cmd(LCD_DISP_ON_CURSOR_ON);
     a14:	8e e0       	ldi	r24, 0x0E	; 14
     a16:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     a1a:	af ec       	ldi	r26, 0xCF	; 207
     a1c:	b7 e0       	ldi	r27, 0x07	; 7
     a1e:	11 97       	sbiw	r26, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <LCD_vInit+0x18c>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <LCD_vInit+0x192>
     a24:	00 00       	nop
				_delay_ms(1);
				LCD_vsend_cmd(LCD_CLEAR_SCREEN);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     a2c:	8f e1       	ldi	r24, 0x1F	; 31
     a2e:	9e e4       	ldi	r25, 0x4E	; 78
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <LCD_vInit+0x19e>
     a34:	00 c0       	rjmp	.+0      	; 0xa36 <LCD_vInit+0x1a4>
     a36:	00 00       	nop
				_delay_ms(10);
				LCD_vsend_cmd(LCD_ENTRY_MODE);
     a38:	86 e0       	ldi	r24, 0x06	; 6
     a3a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     a3e:	af ec       	ldi	r26, 0xCF	; 207
     a40:	b7 e0       	ldi	r27, 0x07	; 7
     a42:	11 97       	sbiw	r26, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCD_vInit+0x1b0>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <LCD_vInit+0x1b6>
     a48:	00 00       	nop
     a4a:	08 95       	ret

00000a4c <LCD_vsend_char>:
static void LCD_send_falling_edge(void){
	GPIO_vWritePIN(ip->EN_port,ip->EN_pin,1);
	_delay_ms(2);
	GPIO_vWritePIN(ip->EN_port,ip->EN_pin,0);
}
void LCD_vsend_char(u_int8 data){
     a4c:	cf 93       	push	r28
     a4e:	c8 2f       	mov	r28, r24
	if(ip->Mode==EIGHT_BIT){
     a50:	e0 91 90 00 	lds	r30, 0x0090
     a54:	f0 91 91 00 	lds	r31, 0x0091
     a58:	80 81       	ld	r24, Z
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	b1 f4       	brne	.+44     	; 0xa8a <LCD_vsend_char+0x3e>
		GPIO_vWritePORT(ip->LCD_port,data);
     a5e:	82 81       	ldd	r24, Z+2	; 0x02
     a60:	6c 2f       	mov	r22, r28
     a62:	0e 94 a4 01 	call	0x348	; 0x348 <GPIO_vWritePORT>
		GPIO_vWritePIN(ip->RS_port,ip->RS_pin,1);
     a66:	e0 91 90 00 	lds	r30, 0x0090
     a6a:	f0 91 91 00 	lds	r31, 0x0091
     a6e:	83 81       	ldd	r24, Z+3	; 0x03
     a70:	64 81       	ldd	r22, Z+4	; 0x04
     a72:	41 e0       	ldi	r20, 0x01	; 1
     a74:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
		LCD_send_falling_edge();
     a78:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
     a7c:	8f ec       	ldi	r24, 0xCF	; 207
     a7e:	97 e0       	ldi	r25, 0x07	; 7
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <LCD_vsend_char+0x34>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <LCD_vsend_char+0x3a>
     a86:	00 00       	nop
     a88:	58 c0       	rjmp	.+176    	; 0xb3a <LCD_vsend_char+0xee>
		_delay_ms(1);
	}else{
		if (ip->Nibble==HIGH_NIBBLE){
     a8a:	81 81       	ldd	r24, Z+1	; 0x01
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	59 f5       	brne	.+86     	; 0xae6 <LCD_vsend_char+0x9a>
			GPIO_vHigh_Nibble_write(ip->LCD_port,data>>4);
     a90:	6c 2f       	mov	r22, r28
     a92:	62 95       	swap	r22
     a94:	6f 70       	andi	r22, 0x0F	; 15
     a96:	82 81       	ldd	r24, Z+2	; 0x02
     a98:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GPIO_vHigh_Nibble_write>
			GPIO_vWritePIN(ip->RS_port,ip->RS_pin,1);
     a9c:	e0 91 90 00 	lds	r30, 0x0090
     aa0:	f0 91 91 00 	lds	r31, 0x0091
     aa4:	83 81       	ldd	r24, Z+3	; 0x03
     aa6:	64 81       	ldd	r22, Z+4	; 0x04
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
			LCD_send_falling_edge();
     aae:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
			GPIO_vHigh_Nibble_write(ip->LCD_port,data);
     ab2:	e0 91 90 00 	lds	r30, 0x0090
     ab6:	f0 91 91 00 	lds	r31, 0x0091
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	6c 2f       	mov	r22, r28
     abe:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GPIO_vHigh_Nibble_write>
			GPIO_vWritePIN(ip->RS_port,ip->RS_pin,1);
     ac2:	e0 91 90 00 	lds	r30, 0x0090
     ac6:	f0 91 91 00 	lds	r31, 0x0091
     aca:	83 81       	ldd	r24, Z+3	; 0x03
     acc:	64 81       	ldd	r22, Z+4	; 0x04
     ace:	41 e0       	ldi	r20, 0x01	; 1
     ad0:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
			LCD_send_falling_edge();
     ad4:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
     ad8:	8f ec       	ldi	r24, 0xCF	; 207
     ada:	97 e0       	ldi	r25, 0x07	; 7
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <LCD_vsend_char+0x90>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <LCD_vsend_char+0x96>
     ae2:	00 00       	nop
     ae4:	2a c0       	rjmp	.+84     	; 0xb3a <LCD_vsend_char+0xee>
			_delay_ms(1);
		}else{
			GPIO_vLow_Nibble_write(ip->LCD_port,data>>4);
     ae6:	6c 2f       	mov	r22, r28
     ae8:	62 95       	swap	r22
     aea:	6f 70       	andi	r22, 0x0F	; 15
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_vLow_Nibble_write>
			GPIO_vWritePIN(ip->RS_port,ip->RS_pin,1);
     af2:	e0 91 90 00 	lds	r30, 0x0090
     af6:	f0 91 91 00 	lds	r31, 0x0091
     afa:	83 81       	ldd	r24, Z+3	; 0x03
     afc:	64 81       	ldd	r22, Z+4	; 0x04
     afe:	41 e0       	ldi	r20, 0x01	; 1
     b00:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
			LCD_send_falling_edge();
     b04:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
			GPIO_vLow_Nibble_write(ip->LCD_port,data);
     b08:	e0 91 90 00 	lds	r30, 0x0090
     b0c:	f0 91 91 00 	lds	r31, 0x0091
     b10:	82 81       	ldd	r24, Z+2	; 0x02
     b12:	6c 2f       	mov	r22, r28
     b14:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_vLow_Nibble_write>
			GPIO_vWritePIN(ip->RS_port,ip->RS_pin,1);
     b18:	e0 91 90 00 	lds	r30, 0x0090
     b1c:	f0 91 91 00 	lds	r31, 0x0091
     b20:	83 81       	ldd	r24, Z+3	; 0x03
     b22:	64 81       	ldd	r22, Z+4	; 0x04
     b24:	41 e0       	ldi	r20, 0x01	; 1
     b26:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
			LCD_send_falling_edge();
     b2a:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_send_falling_edge>
     b2e:	8f ec       	ldi	r24, 0xCF	; 207
     b30:	97 e0       	ldi	r25, 0x07	; 7
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <LCD_vsend_char+0xe6>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <LCD_vsend_char+0xec>
     b38:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <LCD_vsend_string>:

void LCD_vsend_string(u_int8 *ptr){
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	ec 01       	movw	r28, r24
	while((*ptr)!='\0'){
     b44:	88 81       	ld	r24, Y
     b46:	88 23       	and	r24, r24
     b48:	31 f0       	breq	.+12     	; 0xb56 <LCD_vsend_string+0x18>
			_delay_ms(1);
		}
	}
}

void LCD_vsend_string(u_int8 *ptr){
     b4a:	21 96       	adiw	r28, 0x01	; 1
	while((*ptr)!='\0'){
		LCD_vsend_char(*ptr);
     b4c:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCD_vsend_char>
		}
	}
}

void LCD_vsend_string(u_int8 *ptr){
	while((*ptr)!='\0'){
     b50:	89 91       	ld	r24, Y+
     b52:	88 23       	and	r24, r24
     b54:	d9 f7       	brne	.-10     	; 0xb4c <LCD_vsend_string+0xe>
		LCD_vsend_char(*ptr);
		ptr++;
	}
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <LCD_vMove_Cursor>:

void LCD_vMove_Cursor(u_int8 raw, u_int8 position){
	u_int8 data;
	if(raw > 3 || raw <1 || position > 16 ||position < 1){
     b5c:	28 2f       	mov	r18, r24
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	23 30       	cpi	r18, 0x03	; 3
     b62:	70 f4       	brcc	.+28     	; 0xb80 <LCD_vMove_Cursor+0x24>
     b64:	61 31       	cpi	r22, 0x11	; 17
     b66:	70 f4       	brcc	.+28     	; 0xb84 <LCD_vMove_Cursor+0x28>
     b68:	66 23       	and	r22, r22
     b6a:	71 f0       	breq	.+28     	; 0xb88 <LCD_vMove_Cursor+0x2c>
		data= 0x80;
	}else if(1== raw){
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	19 f4       	brne	.+6      	; 0xb76 <LCD_vMove_Cursor+0x1a>
		data = 0x80 + (position - 1);
     b70:	96 2f       	mov	r25, r22
     b72:	91 58       	subi	r25, 0x81	; 129
     b74:	0a c0       	rjmp	.+20     	; 0xb8a <LCD_vMove_Cursor+0x2e>
	}else if(2 == raw){
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	41 f4       	brne	.+16     	; 0xb8a <LCD_vMove_Cursor+0x2e>
		data = 0xC0 + (position - 1);
     b7a:	96 2f       	mov	r25, r22
     b7c:	91 54       	subi	r25, 0x41	; 65
     b7e:	05 c0       	rjmp	.+10     	; 0xb8a <LCD_vMove_Cursor+0x2e>
}

void LCD_vMove_Cursor(u_int8 raw, u_int8 position){
	u_int8 data;
	if(raw > 3 || raw <1 || position > 16 ||position < 1){
		data= 0x80;
     b80:	90 e8       	ldi	r25, 0x80	; 128
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <LCD_vMove_Cursor+0x2e>
     b84:	90 e8       	ldi	r25, 0x80	; 128
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <LCD_vMove_Cursor+0x2e>
     b88:	90 e8       	ldi	r25, 0x80	; 128
	}else if(1== raw){
		data = 0x80 + (position - 1);
	}else if(2 == raw){
		data = 0xC0 + (position - 1);
	} 
	LCD_vsend_cmd(data);
     b8a:	89 2f       	mov	r24, r25
     b8c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     b90:	8f ec       	ldi	r24, 0xCF	; 207
     b92:	97 e0       	ldi	r25, 0x07	; 7
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <LCD_vMove_Cursor+0x38>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <LCD_vMove_Cursor+0x3e>
     b9a:	00 00       	nop
	_delay_ms(1);
}
     b9c:	08 95       	ret

00000b9e <LCD_vclear_screen>:

void LCD_vclear_screen(){
	LCD_vsend_cmd(LCD_CLEAR_SCREEN);
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_vsend_cmd>
     ba4:	8f e1       	ldi	r24, 0x1F	; 31
     ba6:	9e e4       	ldi	r25, 0x4E	; 78
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <LCD_vclear_screen+0xa>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <LCD_vclear_screen+0x10>
     bae:	00 00       	nop
	_delay_ms(10);
}
     bb0:	08 95       	ret

00000bb2 <LCD_vsend_number>:

void LCD_vsend_number(u_int32 Number){
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	27 97       	sbiw	r28, 0x07	; 7
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
	u_int8 str[7];
	sprintf(str,"%d",Number);
     bce:	2d b7       	in	r18, 0x3d	; 61
     bd0:	3e b7       	in	r19, 0x3e	; 62
     bd2:	28 50       	subi	r18, 0x08	; 8
     bd4:	30 40       	sbci	r19, 0x00	; 0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	3e bf       	out	0x3e, r19	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	2d bf       	out	0x3d, r18	; 61
     be0:	4d b7       	in	r20, 0x3d	; 61
     be2:	5e b7       	in	r21, 0x3e	; 62
     be4:	4f 5f       	subi	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	8e 01       	movw	r16, r28
     bea:	0f 5f       	subi	r16, 0xFF	; 255
     bec:	1f 4f       	sbci	r17, 0xFF	; 255
     bee:	ed b7       	in	r30, 0x3d	; 61
     bf0:	fe b7       	in	r31, 0x3e	; 62
     bf2:	12 83       	std	Z+2, r17	; 0x02
     bf4:	01 83       	std	Z+1, r16	; 0x01
     bf6:	20 e7       	ldi	r18, 0x70	; 112
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	fa 01       	movw	r30, r20
     bfc:	33 83       	std	Z+3, r19	; 0x03
     bfe:	22 83       	std	Z+2, r18	; 0x02
     c00:	84 83       	std	Z+4, r24	; 0x04
     c02:	95 83       	std	Z+5, r25	; 0x05
     c04:	a6 83       	std	Z+6, r26	; 0x06
     c06:	b7 83       	std	Z+7, r27	; 0x07
     c08:	0e 94 ae 09 	call	0x135c	; 0x135c <sprintf>
	LCD_vsend_string(str);
     c0c:	2d b7       	in	r18, 0x3d	; 61
     c0e:	3e b7       	in	r19, 0x3e	; 62
     c10:	28 5f       	subi	r18, 0xF8	; 248
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	3e bf       	out	0x3e, r19	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	2d bf       	out	0x3d, r18	; 61
     c1e:	c8 01       	movw	r24, r16
     c20:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_vsend_string>
}
     c24:	27 96       	adiw	r28, 0x07	; 7
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	08 95       	ret

00000c3a <LCD_vsend_real_number>:

void LCD_vsend_real_number(float64 Number){
     c3a:	8f 92       	push	r8
     c3c:	9f 92       	push	r9
     c3e:	af 92       	push	r10
     c40:	bf 92       	push	r11
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	60 97       	sbiw	r28, 0x10	; 16
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	6b 01       	movw	r12, r22
     c64:	7c 01       	movw	r14, r24
	u_int8 str [16];
	u_int8 *tmpsign = (Number < 0)? "-" : "";
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	a9 01       	movw	r20, r18
     c6c:	0e 94 3d 08 	call	0x107a	; 0x107a <__cmpsf2>
     c70:	88 23       	and	r24, r24
     c72:	6c f4       	brge	.+26     	; 0xc8e <LCD_vsend_real_number+0x54>
	float32 tmpval = (Number < 0)? -Number : Number;
     c74:	46 01       	movw	r8, r12
     c76:	57 01       	movw	r10, r14
     c78:	b7 fa       	bst	r11, 7
     c7a:	b0 94       	com	r11
     c7c:	b7 f8       	bld	r11, 7
     c7e:	b0 94       	com	r11
	LCD_vsend_string(str);
}

void LCD_vsend_real_number(float64 Number){
	u_int8 str [16];
	u_int8 *tmpsign = (Number < 0)? "-" : "";
     c80:	0f 2e       	mov	r0, r31
     c82:	f3 e7       	ldi	r31, 0x73	; 115
     c84:	ef 2e       	mov	r14, r31
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ff 2e       	mov	r15, r31
     c8a:	f0 2d       	mov	r31, r0
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <LCD_vsend_real_number+0x64>
	float32 tmpval = (Number < 0)? -Number : Number;
     c8e:	46 01       	movw	r8, r12
     c90:	57 01       	movw	r10, r14
	LCD_vsend_string(str);
}

void LCD_vsend_real_number(float64 Number){
	u_int8 str [16];
	u_int8 *tmpsign = (Number < 0)? "-" : "";
     c92:	0f 2e       	mov	r0, r31
     c94:	f5 e7       	ldi	r31, 0x75	; 117
     c96:	ef 2e       	mov	r14, r31
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	ff 2e       	mov	r15, r31
     c9c:	f0 2d       	mov	r31, r0
	float32 tmpval = (Number < 0)? -Number : Number;
	s_int32 tmpint1 = tmpval;
     c9e:	c5 01       	movw	r24, r10
     ca0:	b4 01       	movw	r22, r8
     ca2:	0e 94 41 08 	call	0x1082	; 0x1082 <__fixsfsi>
	float32 tmpfrac = tmpval - tmpint1;
	s_int32 tmpint2 = tmpfrac * 10000;
	sprintf(str,"%s%d.%04d",tmpsign,tmpint1,tmpint2);
     ca6:	2d b7       	in	r18, 0x3d	; 61
     ca8:	3e b7       	in	r19, 0x3e	; 62
     caa:	2e 50       	subi	r18, 0x0E	; 14
     cac:	30 40       	sbci	r19, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	3e bf       	out	0x3e, r19	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	2d bf       	out	0x3d, r18	; 61
     cb8:	cd b6       	in	r12, 0x3d	; 61
     cba:	de b6       	in	r13, 0x3e	; 62
     cbc:	08 94       	sec
     cbe:	c1 1c       	adc	r12, r1
     cc0:	d1 1c       	adc	r13, r1
     cc2:	8e 01       	movw	r16, r28
     cc4:	0f 5f       	subi	r16, 0xFF	; 255
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	ed b7       	in	r30, 0x3d	; 61
     cca:	fe b7       	in	r31, 0x3e	; 62
     ccc:	12 83       	std	Z+2, r17	; 0x02
     cce:	01 83       	std	Z+1, r16	; 0x01
     cd0:	26 e7       	ldi	r18, 0x76	; 118
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	f6 01       	movw	r30, r12
     cd6:	33 83       	std	Z+3, r19	; 0x03
     cd8:	22 83       	std	Z+2, r18	; 0x02
     cda:	f5 82       	std	Z+5, r15	; 0x05
     cdc:	e4 82       	std	Z+4, r14	; 0x04
     cde:	66 83       	std	Z+6, r22	; 0x06
     ce0:	77 83       	std	Z+7, r23	; 0x07
     ce2:	80 87       	std	Z+8, r24	; 0x08
     ce4:	91 87       	std	Z+9, r25	; 0x09
void LCD_vsend_real_number(float64 Number){
	u_int8 str [16];
	u_int8 *tmpsign = (Number < 0)? "-" : "";
	float32 tmpval = (Number < 0)? -Number : Number;
	s_int32 tmpint1 = tmpval;
	float32 tmpfrac = tmpval - tmpint1;
     ce6:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__floatsisf>
     cea:	9b 01       	movw	r18, r22
     cec:	ac 01       	movw	r20, r24
     cee:	c5 01       	movw	r24, r10
     cf0:	b4 01       	movw	r22, r8
     cf2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__subsf3>
	s_int32 tmpint2 = tmpfrac * 10000;
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e4       	ldi	r19, 0x40	; 64
     cfa:	4c e1       	ldi	r20, 0x1C	; 28
     cfc:	56 e4       	ldi	r21, 0x46	; 70
     cfe:	0e 94 24 09 	call	0x1248	; 0x1248 <__mulsf3>
     d02:	0e 94 41 08 	call	0x1082	; 0x1082 <__fixsfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
	sprintf(str,"%s%d.%04d",tmpsign,tmpint1,tmpint2);
     d0a:	f6 01       	movw	r30, r12
     d0c:	82 87       	std	Z+10, r24	; 0x0a
     d0e:	93 87       	std	Z+11, r25	; 0x0b
     d10:	a4 87       	std	Z+12, r26	; 0x0c
     d12:	b5 87       	std	Z+13, r27	; 0x0d
     d14:	0e 94 ae 09 	call	0x135c	; 0x135c <sprintf>
	LCD_vsend_string(str);
     d18:	2d b7       	in	r18, 0x3d	; 61
     d1a:	3e b7       	in	r19, 0x3e	; 62
     d1c:	22 5f       	subi	r18, 0xF2	; 242
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	3e bf       	out	0x3e, r19	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	2d bf       	out	0x3d, r18	; 61
     d2a:	c8 01       	movw	r24, r16
     d2c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_vsend_string>
     d30:	60 96       	adiw	r28, 0x10	; 16
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	bf 90       	pop	r11
     d4e:	af 90       	pop	r10
     d50:	9f 90       	pop	r9
     d52:	8f 90       	pop	r8
     d54:	08 95       	ret

00000d56 <LED_vInit>:
 * Created: 7/3/2020 2:13:15 PM
 *  Author: Mahmoud Ayman
 */ 
#include "LED_ECU_driver.h"
void LED_vInit(u_int8 portnum,u_int8 pinnum){
	GPIO_vSETPIN_DDR(portnum,pinnum,1);
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
}
     d5c:	08 95       	ret

00000d5e <LED_von>:
void LED_von(u_int8 portnum,u_int8 pinnum){
	GPIO_vWritePIN(portnum,pinnum,1);
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
}
     d64:	08 95       	ret

00000d66 <LED_voff>:
void LED_voff(u_int8 portnum,u_int8 pinnum){
	GPIO_vWritePIN(portnum,pinnum,0);
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	0e 94 13 01 	call	0x226	; 0x226 <GPIO_vWritePIN>
}
     d6c:	08 95       	ret

00000d6e <LED_vtoggle>:
void LED_vtoggle(u_int8 portnum,u_int8 pinnum){
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	d8 2f       	mov	r29, r24
     d74:	c6 2f       	mov	r28, r22
	u_int8 x=2;
	x=GPIO_u8ReadPIN(portnum,pinnum);
     d76:	0e 94 c3 01 	call	0x386	; 0x386 <GPIO_u8ReadPIN>
	if(x==1){
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	29 f4       	brne	.+10     	; 0xd88 <LED_vtoggle+0x1a>
		LED_voff(portnum,pinnum);
     d7e:	8d 2f       	mov	r24, r29
     d80:	6c 2f       	mov	r22, r28
     d82:	0e 94 b3 06 	call	0xd66	; 0xd66 <LED_voff>
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <LED_vtoggle+0x22>
	}else{
		LED_von(portnum,pinnum);
     d88:	8d 2f       	mov	r24, r29
     d8a:	6c 2f       	mov	r22, r28
     d8c:	0e 94 af 06 	call	0xd5e	; 0xd5e <LED_von>
	}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <main>:
#include "ADC_MCAL.h"
#include <avr/interrupt.h>
#define F_CPU 8000000UL
#include <util/delay.h>
#include "Timer_MCAL.h"
int main(void){
     d96:	ff cf       	rjmp	.-2      	; 0xd96 <main>

00000d98 <Seven_segment_Init>:
#define  OUTPUT 1
#define INPUT 0 
u_int8 mode;
u_int8 nibble;
u_int8 port;
void Seven_segment_Init(u_int8 Mode,u_int8 portnum,u_int8 Nibble){
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	d6 2f       	mov	r29, r22
     d9e:	c4 2f       	mov	r28, r20
	if (Mode== EIGHT_BIT){
     da0:	88 23       	and	r24, r24
     da2:	59 f4       	brne	.+22     	; 0xdba <Seven_segment_Init+0x22>
		GPIO_vSETPORT_DDR(portnum,0xff);
     da4:	86 2f       	mov	r24, r22
     da6:	6f ef       	ldi	r22, 0xFF	; 255
     da8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_vSETPORT_DDR>
		mode = Mode;
     dac:	10 92 92 00 	sts	0x0092, r1
		nibble = Nibble;
     db0:	c0 93 93 00 	sts	0x0093, r28
		port =portnum;
     db4:	d0 93 94 00 	sts	0x0094, r29
     db8:	0f c0       	rjmp	.+30     	; 0xdd8 <Seven_segment_Init+0x40>
	}else if(Mode == FOUR_BIT){
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	69 f4       	brne	.+26     	; 0xdd8 <Seven_segment_Init+0x40>
		if(Nibble==Low_Nibble){
     dbe:	44 23       	and	r20, r20
     dc0:	29 f4       	brne	.+10     	; 0xdcc <Seven_segment_Init+0x34>
			GPIO_vLow_Nibble_set_DDR(portnum,OUTPUT);
     dc2:	86 2f       	mov	r24, r22
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <GPIO_vLow_Nibble_set_DDR>
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <Seven_segment_Init+0x40>
			/*GPIO_vSETPIN_DDR(portnum,0,1);
			GPIO_vSETPIN_DDR(portnum,1,1);
			GPIO_vSETPIN_DDR(portnum,2,1);
			GPIO_vSETPIN_DDR(portnum,3,1);*/
		}else if(Nibble == High_Nibble){
     dcc:	41 30       	cpi	r20, 0x01	; 1
     dce:	21 f4       	brne	.+8      	; 0xdd8 <Seven_segment_Init+0x40>
			/*GPIO_vSETPIN_DDR(portnum,4,1);
			GPIO_vSETPIN_DDR(portnum,5,1);
			GPIO_vSETPIN_DDR(portnum,6,1);
			GPIO_vSETPIN_DDR(portnum,7,1);*/
			GPIO_vHigh_Nibble_set_DDR(portnum,OUTPUT);
     dd0:	86 2f       	mov	r24, r22
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	0e 94 b4 02 	call	0x568	; 0x568 <GPIO_vHigh_Nibble_set_DDR>
		}			
		
	}
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <Seven_segment_Display>:
void Seven_segment_Display(u_int8 Val){
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	2a 97       	sbiw	r28, 0x0a	; 10
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	68 2f       	mov	r22, r24
	if (mode == FOUR_BIT){
     df4:	80 91 92 00 	lds	r24, 0x0092
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	81 f4       	brne	.+32     	; 0xe1c <Seven_segment_Display+0x3e>
		if (nibble == Low_Nibble){
     dfc:	80 91 93 00 	lds	r24, 0x0093
     e00:	88 23       	and	r24, r24
     e02:	29 f4       	brne	.+10     	; 0xe0e <Seven_segment_Display+0x30>
			GPIO_vLow_Nibble_write(port,Val);
     e04:	80 91 94 00 	lds	r24, 0x0094
     e08:	0e 94 80 02 	call	0x500	; 0x500 <GPIO_vLow_Nibble_write>
     e0c:	2e c0       	rjmp	.+92     	; 0xe6a <Seven_segment_Display+0x8c>
		}else if(nibble == High_Nibble){
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	61 f5       	brne	.+88     	; 0xe6a <Seven_segment_Display+0x8c>
			GPIO_vHigh_Nibble_write(port,Val);
     e12:	80 91 94 00 	lds	r24, 0x0094
     e16:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GPIO_vHigh_Nibble_write>
     e1a:	27 c0       	rjmp	.+78     	; 0xe6a <Seven_segment_Display+0x8c>
		}
	}else if(mode == EIGHT_BIT){
     e1c:	88 23       	and	r24, r24
     e1e:	29 f5       	brne	.+74     	; 0xe6a <Seven_segment_Display+0x8c>
		if(Val >=0 && Val <= 9){
     e20:	6a 30       	cpi	r22, 0x0A	; 10
     e22:	90 f4       	brcc	.+36     	; 0xe48 <Seven_segment_Display+0x6a>
			u_int8 seven_segment_arr[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
     e24:	de 01       	movw	r26, r28
     e26:	11 96       	adiw	r26, 0x01	; 1
     e28:	e0 e8       	ldi	r30, 0x80	; 128
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	8a e0       	ldi	r24, 0x0A	; 10
     e2e:	01 90       	ld	r0, Z+
     e30:	0d 92       	st	X+, r0
     e32:	81 50       	subi	r24, 0x01	; 1
     e34:	e1 f7       	brne	.-8      	; 0xe2e <Seven_segment_Display+0x50>
			GPIO_vWritePORT(port,seven_segment_arr[Val]);
     e36:	fe 01       	movw	r30, r28
     e38:	e6 0f       	add	r30, r22
     e3a:	f1 1d       	adc	r31, r1
     e3c:	80 91 94 00 	lds	r24, 0x0094
     e40:	61 81       	ldd	r22, Z+1	; 0x01
     e42:	0e 94 a4 01 	call	0x348	; 0x348 <GPIO_vWritePORT>
     e46:	11 c0       	rjmp	.+34     	; 0xe6a <Seven_segment_Display+0x8c>
			#define B 1
			#define C 2
			#define D 3
			#define E 4
			#define F 5
			u_int8 arr[6]={0x77,0x1f,0x39,0x5E,0x79,0x71};
     e48:	de 01       	movw	r26, r28
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	ea e8       	ldi	r30, 0x8A	; 138
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	86 e0       	ldi	r24, 0x06	; 6
     e52:	01 90       	ld	r0, Z+
     e54:	0d 92       	st	X+, r0
     e56:	81 50       	subi	r24, 0x01	; 1
     e58:	e1 f7       	brne	.-8      	; 0xe52 <Seven_segment_Display+0x74>
			GPIO_vWritePORT(port,arr[Val]);
     e5a:	fe 01       	movw	r30, r28
     e5c:	e6 0f       	add	r30, r22
     e5e:	f1 1d       	adc	r31, r1
     e60:	80 91 94 00 	lds	r24, 0x0094
     e64:	61 81       	ldd	r22, Z+1	; 0x01
     e66:	0e 94 a4 01 	call	0x348	; 0x348 <GPIO_vWritePORT>
		}
	}
     e6a:	2a 96       	adiw	r28, 0x0a	; 10
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <Switch_vInit>:
 * Created: 7/3/2020 2:33:07 PM
 *  Author: Mahmoud Ayman
 */ 

#include "Switch_ECU_driver.h"
void Switch_vInit(u_int8 portnum,u_int8 pinnum){
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	d8 2f       	mov	r29, r24
     e82:	c6 2f       	mov	r28, r22
	GPIO_vSETPIN_DDR(portnum, pinnum, 0);
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_vSETPIN_DDR>
	GPIO_vInternal_pullupON(portnum,pinnum);
     e8a:	8d 2f       	mov	r24, r29
     e8c:	6c 2f       	mov	r22, r28
     e8e:	0e 94 4b 02 	call	0x496	; 0x496 <GPIO_vInternal_pullupON>
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <Switch_u8Read>:
u_int8 Switch_u8Read(u_int8 portnum,u_int8 pinnum){
	u_int8 x;
	x=GPIO_u8ReadPIN(portnum,pinnum);
     e98:	0e 94 c3 01 	call	0x386	; 0x386 <GPIO_u8ReadPIN>
	return x;
     e9c:	08 95       	ret

00000e9e <TMR0_Get_config>:

#include "Timer_MCAL.h"

TMR0_config *ptr_struct;

void TMR0_Get_config(TMR0_config *ptr, u_int8 Mode, u_int8 OVF_Interrupt, u_int8 CTC_Interrupt, u_int8 prescalar){
     e9e:	0f 93       	push	r16
	ptr_struct=ptr;
     ea0:	90 93 96 00 	sts	0x0096, r25
     ea4:	80 93 95 00 	sts	0x0095, r24
	ptr_struct->mode=Mode;
     ea8:	fc 01       	movw	r30, r24
     eaa:	60 83       	st	Z, r22
	ptr_struct->TMR0_OVF_Interrupt=OVF_Interrupt;
     eac:	e0 91 95 00 	lds	r30, 0x0095
     eb0:	f0 91 96 00 	lds	r31, 0x0096
     eb4:	41 83       	std	Z+1, r20	; 0x01
	ptr_struct->TMR0_CTC_Interrupt=CTC_Interrupt;
     eb6:	e0 91 95 00 	lds	r30, 0x0095
     eba:	f0 91 96 00 	lds	r31, 0x0096
     ebe:	22 83       	std	Z+2, r18	; 0x02
	ptr_struct->Prescalar=prescalar;
     ec0:	03 83       	std	Z+3, r16	; 0x03
}
     ec2:	0f 91       	pop	r16
     ec4:	08 95       	ret

00000ec6 <TMR0_VInit>:

void TMR0_VInit(){
	/*Adjust Mode*/
	if(ptr_struct->mode==NORMAL_MODE){
     ec6:	e0 91 95 00 	lds	r30, 0x0095
     eca:	f0 91 96 00 	lds	r31, 0x0096
     ece:	80 81       	ld	r24, Z
     ed0:	88 23       	and	r24, r24
     ed2:	39 f4       	brne	.+14     	; 0xee2 <TMR0_VInit+0x1c>
		CLR_BIT(XTCCR0,WGM00);
     ed4:	83 b7       	in	r24, 0x33	; 51
     ed6:	8f 7b       	andi	r24, 0xBF	; 191
     ed8:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(XTCCR0,WGM01);
     eda:	83 b7       	in	r24, 0x33	; 51
     edc:	87 7f       	andi	r24, 0xF7	; 247
     ede:	83 bf       	out	0x33, r24	; 51
     ee0:	23 c0       	rjmp	.+70     	; 0xf28 <TMR0_VInit+0x62>
	}else if(ptr_struct->mode==CTC_MODE){
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	39 f4       	brne	.+14     	; 0xef4 <TMR0_VInit+0x2e>
		CLR_BIT(XTCCR0,WGM00);
     ee6:	83 b7       	in	r24, 0x33	; 51
     ee8:	8f 7b       	andi	r24, 0xBF	; 191
     eea:	83 bf       	out	0x33, r24	; 51
		SEt_BIT(XTCCR0,WGM01);
     eec:	83 b7       	in	r24, 0x33	; 51
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	83 bf       	out	0x33, r24	; 51
     ef2:	1a c0       	rjmp	.+52     	; 0xf28 <TMR0_VInit+0x62>
	}else if(ptr_struct->mode==OCM_NON_PWM_MODE){
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	39 f4       	brne	.+14     	; 0xf06 <TMR0_VInit+0x40>
		CLR_BIT(XTCCR0,WGM00);
     ef8:	83 b7       	in	r24, 0x33	; 51
     efa:	8f 7b       	andi	r24, 0xBF	; 191
     efc:	83 bf       	out	0x33, r24	; 51
		SEt_BIT(XTCCR0,WGM01);
     efe:	83 b7       	in	r24, 0x33	; 51
     f00:	88 60       	ori	r24, 0x08	; 8
     f02:	83 bf       	out	0x33, r24	; 51
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <TMR0_VInit+0x62>
	}else if(ptr_struct->mode==FAST_PWM_MODE){
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	39 f4       	brne	.+14     	; 0xf18 <TMR0_VInit+0x52>
		SEt_BIT(XTCCR0,WGM00);
     f0a:	83 b7       	in	r24, 0x33	; 51
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	83 bf       	out	0x33, r24	; 51
		SEt_BIT(XTCCR0,WGM01);
     f10:	83 b7       	in	r24, 0x33	; 51
     f12:	88 60       	ori	r24, 0x08	; 8
     f14:	83 bf       	out	0x33, r24	; 51
     f16:	08 c0       	rjmp	.+16     	; 0xf28 <TMR0_VInit+0x62>
	}else if(ptr_struct->mode==PHASE_CORRECT_PWM){
     f18:	84 30       	cpi	r24, 0x04	; 4
     f1a:	31 f4       	brne	.+12     	; 0xf28 <TMR0_VInit+0x62>
		SEt_BIT(XTCCR0,WGM00);
     f1c:	83 b7       	in	r24, 0x33	; 51
     f1e:	80 64       	ori	r24, 0x40	; 64
     f20:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(XTCCR0,WGM01);
     f22:	83 b7       	in	r24, 0x33	; 51
     f24:	87 7f       	andi	r24, 0xF7	; 247
     f26:	83 bf       	out	0x33, r24	; 51
	}
	/*****************************************/
	/*Adjust Prescalar*/
	XTCCR0&=0xF8;
     f28:	83 b7       	in	r24, 0x33	; 51
     f2a:	88 7f       	andi	r24, 0xF8	; 248
     f2c:	83 bf       	out	0x33, r24	; 51
	XTCCR0|=ptr_struct->Prescalar;  
     f2e:	93 b7       	in	r25, 0x33	; 51
     f30:	e0 91 95 00 	lds	r30, 0x0095
     f34:	f0 91 96 00 	lds	r31, 0x0096
     f38:	83 81       	ldd	r24, Z+3	; 0x03
     f3a:	89 2b       	or	r24, r25
     f3c:	83 bf       	out	0x33, r24	; 51
	/********************************/
	/*OVF Interrupt*/
	if(ptr_struct->TMR0_OVF_Interrupt==TOIE0_ENABLE){
     f3e:	81 81       	ldd	r24, Z+1	; 0x01
     f40:	88 23       	and	r24, r24
     f42:	21 f4       	brne	.+8      	; 0xf4c <TMR0_VInit+0x86>
		SEt_BIT(XTIMASK,TOIE0);
     f44:	89 b7       	in	r24, 0x39	; 57
     f46:	81 60       	ori	r24, 0x01	; 1
     f48:	89 bf       	out	0x39, r24	; 57
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <TMR0_VInit+0x90>
	}else if(ptr_struct->TMR0_OVF_Interrupt==TOIE0_DISABLE){
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	99 f4       	brne	.+38     	; 0xf76 <TMR0_VInit+0xb0>
		CLR_BIT(XTIMASK,TOIE0);
     f50:	89 b7       	in	r24, 0x39	; 57
     f52:	8e 7f       	andi	r24, 0xFE	; 254
     f54:	89 bf       	out	0x39, r24	; 57
	}
	/*****************************/
	/*CTC Interrupt*/
	if(ptr_struct->TMR0_OVF_Interrupt==OCIE0_ENABLE){
     f56:	e0 91 95 00 	lds	r30, 0x0095
     f5a:	f0 91 96 00 	lds	r31, 0x0096
     f5e:	81 81       	ldd	r24, Z+1	; 0x01
     f60:	88 23       	and	r24, r24
     f62:	21 f4       	brne	.+8      	; 0xf6c <TMR0_VInit+0xa6>
		SEt_BIT(XTIMASK,OCIE0);
     f64:	89 b7       	in	r24, 0x39	; 57
     f66:	82 60       	ori	r24, 0x02	; 2
     f68:	89 bf       	out	0x39, r24	; 57
     f6a:	08 95       	ret
	}else if(ptr_struct->TMR0_OVF_Interrupt==OCIE0_DISABLE){
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	19 f4       	brne	.+6      	; 0xf76 <TMR0_VInit+0xb0>
		CLR_BIT(XTIMASK,OCIE0);
     f70:	89 b7       	in	r24, 0x39	; 57
     f72:	8d 7f       	andi	r24, 0xFD	; 253
     f74:	89 bf       	out	0x39, r24	; 57
     f76:	08 95       	ret

00000f78 <TMR0_Read_count>:
	/*****************************/
}


u_int8 TMR0_Read_count(void){
	return XTCNT0;
     f78:	82 b7       	in	r24, 0x32	; 50
}
     f7a:	08 95       	ret

00000f7c <TMR0_set_compare_value>:

void TMR0_set_compare_value(u_int8 val){
	XOCR0= val;
     f7c:	8c bf       	out	0x3c, r24	; 60
}
     f7e:	08 95       	ret

00000f80 <TMR0_set_counter_value>:

void TMR0_set_counter_value(u_int8 val){
	XTCNT0=val;
     f80:	82 bf       	out	0x32, r24	; 50
}
     f82:	08 95       	ret

00000f84 <TMR0_Fast_PWM_Gen>:


void TMR0_Fast_PWM_Gen(u_int8 duty_cycle){
	/*adjust mode as Fast PWM*/
	SEt_BIT(XTCCR0,WGM00);
     f84:	93 b7       	in	r25, 0x33	; 51
     f86:	90 64       	ori	r25, 0x40	; 64
     f88:	93 bf       	out	0x33, r25	; 51
	SEt_BIT(XTCCR0,WGM01);
     f8a:	93 b7       	in	r25, 0x33	; 51
     f8c:	98 60       	ori	r25, 0x08	; 8
     f8e:	93 bf       	out	0x33, r25	; 51
	/****************************/
	u_int8 val;
	SEt_BIT(XDDRB,3);
     f90:	bb 9a       	sbi	0x17, 3	; 23
	val=(duty_cycle * 256)/100; 
     f92:	38 2f       	mov	r19, r24
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	c9 01       	movw	r24, r18
     f98:	64 e6       	ldi	r22, 0x64	; 100
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	0e 94 87 09 	call	0x130e	; 0x130e <__divmodhi4>
	XOCR0=val; 
     fa0:	6c bf       	out	0x3c, r22	; 60
	CLR_BIT(XTCCR0,COM00);
     fa2:	83 b7       	in	r24, 0x33	; 51
     fa4:	8f 7e       	andi	r24, 0xEF	; 239
     fa6:	83 bf       	out	0x33, r24	; 51
	SEt_BIT(XTCCR0,COM01);
     fa8:	83 b7       	in	r24, 0x33	; 51
     faa:	80 62       	ori	r24, 0x20	; 32
     fac:	83 bf       	out	0x33, r24	; 51
     fae:	08 95       	ret

00000fb0 <__subsf3>:
     fb0:	50 58       	subi	r21, 0x80	; 128

00000fb2 <__addsf3>:
     fb2:	bb 27       	eor	r27, r27
     fb4:	aa 27       	eor	r26, r26
     fb6:	0e d0       	rcall	.+28     	; 0xfd4 <__addsf3x>
     fb8:	0d c1       	rjmp	.+538    	; 0x11d4 <__fp_round>
     fba:	fe d0       	rcall	.+508    	; 0x11b8 <__fp_pscA>
     fbc:	30 f0       	brcs	.+12     	; 0xfca <__addsf3+0x18>
     fbe:	03 d1       	rcall	.+518    	; 0x11c6 <__fp_pscB>
     fc0:	20 f0       	brcs	.+8      	; 0xfca <__addsf3+0x18>
     fc2:	31 f4       	brne	.+12     	; 0xfd0 <__addsf3+0x1e>
     fc4:	9f 3f       	cpi	r25, 0xFF	; 255
     fc6:	11 f4       	brne	.+4      	; 0xfcc <__addsf3+0x1a>
     fc8:	1e f4       	brtc	.+6      	; 0xfd0 <__addsf3+0x1e>
     fca:	f3 c0       	rjmp	.+486    	; 0x11b2 <__fp_nan>
     fcc:	0e f4       	brtc	.+2      	; 0xfd0 <__addsf3+0x1e>
     fce:	e0 95       	com	r30
     fd0:	e7 fb       	bst	r30, 7
     fd2:	e9 c0       	rjmp	.+466    	; 0x11a6 <__fp_inf>

00000fd4 <__addsf3x>:
     fd4:	e9 2f       	mov	r30, r25
     fd6:	0f d1       	rcall	.+542    	; 0x11f6 <__fp_split3>
     fd8:	80 f3       	brcs	.-32     	; 0xfba <__addsf3+0x8>
     fda:	ba 17       	cp	r27, r26
     fdc:	62 07       	cpc	r22, r18
     fde:	73 07       	cpc	r23, r19
     fe0:	84 07       	cpc	r24, r20
     fe2:	95 07       	cpc	r25, r21
     fe4:	18 f0       	brcs	.+6      	; 0xfec <__addsf3x+0x18>
     fe6:	71 f4       	brne	.+28     	; 0x1004 <__addsf3x+0x30>
     fe8:	9e f5       	brtc	.+102    	; 0x1050 <__addsf3x+0x7c>
     fea:	27 c1       	rjmp	.+590    	; 0x123a <__fp_zero>
     fec:	0e f4       	brtc	.+2      	; 0xff0 <__addsf3x+0x1c>
     fee:	e0 95       	com	r30
     ff0:	0b 2e       	mov	r0, r27
     ff2:	ba 2f       	mov	r27, r26
     ff4:	a0 2d       	mov	r26, r0
     ff6:	0b 01       	movw	r0, r22
     ff8:	b9 01       	movw	r22, r18
     ffa:	90 01       	movw	r18, r0
     ffc:	0c 01       	movw	r0, r24
     ffe:	ca 01       	movw	r24, r20
    1000:	a0 01       	movw	r20, r0
    1002:	11 24       	eor	r1, r1
    1004:	ff 27       	eor	r31, r31
    1006:	59 1b       	sub	r21, r25
    1008:	99 f0       	breq	.+38     	; 0x1030 <__addsf3x+0x5c>
    100a:	59 3f       	cpi	r21, 0xF9	; 249
    100c:	50 f4       	brcc	.+20     	; 0x1022 <__addsf3x+0x4e>
    100e:	50 3e       	cpi	r21, 0xE0	; 224
    1010:	68 f1       	brcs	.+90     	; 0x106c <__addsf3x+0x98>
    1012:	1a 16       	cp	r1, r26
    1014:	f0 40       	sbci	r31, 0x00	; 0
    1016:	a2 2f       	mov	r26, r18
    1018:	23 2f       	mov	r18, r19
    101a:	34 2f       	mov	r19, r20
    101c:	44 27       	eor	r20, r20
    101e:	58 5f       	subi	r21, 0xF8	; 248
    1020:	f3 cf       	rjmp	.-26     	; 0x1008 <__addsf3x+0x34>
    1022:	46 95       	lsr	r20
    1024:	37 95       	ror	r19
    1026:	27 95       	ror	r18
    1028:	a7 95       	ror	r26
    102a:	f0 40       	sbci	r31, 0x00	; 0
    102c:	53 95       	inc	r21
    102e:	c9 f7       	brne	.-14     	; 0x1022 <__addsf3x+0x4e>
    1030:	7e f4       	brtc	.+30     	; 0x1050 <__addsf3x+0x7c>
    1032:	1f 16       	cp	r1, r31
    1034:	ba 0b       	sbc	r27, r26
    1036:	62 0b       	sbc	r22, r18
    1038:	73 0b       	sbc	r23, r19
    103a:	84 0b       	sbc	r24, r20
    103c:	ba f0       	brmi	.+46     	; 0x106c <__addsf3x+0x98>
    103e:	91 50       	subi	r25, 0x01	; 1
    1040:	a1 f0       	breq	.+40     	; 0x106a <__addsf3x+0x96>
    1042:	ff 0f       	add	r31, r31
    1044:	bb 1f       	adc	r27, r27
    1046:	66 1f       	adc	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	c2 f7       	brpl	.-16     	; 0x103e <__addsf3x+0x6a>
    104e:	0e c0       	rjmp	.+28     	; 0x106c <__addsf3x+0x98>
    1050:	ba 0f       	add	r27, r26
    1052:	62 1f       	adc	r22, r18
    1054:	73 1f       	adc	r23, r19
    1056:	84 1f       	adc	r24, r20
    1058:	48 f4       	brcc	.+18     	; 0x106c <__addsf3x+0x98>
    105a:	87 95       	ror	r24
    105c:	77 95       	ror	r23
    105e:	67 95       	ror	r22
    1060:	b7 95       	ror	r27
    1062:	f7 95       	ror	r31
    1064:	9e 3f       	cpi	r25, 0xFE	; 254
    1066:	08 f0       	brcs	.+2      	; 0x106a <__addsf3x+0x96>
    1068:	b3 cf       	rjmp	.-154    	; 0xfd0 <__addsf3+0x1e>
    106a:	93 95       	inc	r25
    106c:	88 0f       	add	r24, r24
    106e:	08 f0       	brcs	.+2      	; 0x1072 <__addsf3x+0x9e>
    1070:	99 27       	eor	r25, r25
    1072:	ee 0f       	add	r30, r30
    1074:	97 95       	ror	r25
    1076:	87 95       	ror	r24
    1078:	08 95       	ret

0000107a <__cmpsf2>:
    107a:	71 d0       	rcall	.+226    	; 0x115e <__fp_cmp>
    107c:	08 f4       	brcc	.+2      	; 0x1080 <__cmpsf2+0x6>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	08 95       	ret

00001082 <__fixsfsi>:
    1082:	04 d0       	rcall	.+8      	; 0x108c <__fixunssfsi>
    1084:	68 94       	set
    1086:	b1 11       	cpse	r27, r1
    1088:	d9 c0       	rjmp	.+434    	; 0x123c <__fp_szero>
    108a:	08 95       	ret

0000108c <__fixunssfsi>:
    108c:	bc d0       	rcall	.+376    	; 0x1206 <__fp_splitA>
    108e:	88 f0       	brcs	.+34     	; 0x10b2 <__fixunssfsi+0x26>
    1090:	9f 57       	subi	r25, 0x7F	; 127
    1092:	90 f0       	brcs	.+36     	; 0x10b8 <__fixunssfsi+0x2c>
    1094:	b9 2f       	mov	r27, r25
    1096:	99 27       	eor	r25, r25
    1098:	b7 51       	subi	r27, 0x17	; 23
    109a:	a0 f0       	brcs	.+40     	; 0x10c4 <__fixunssfsi+0x38>
    109c:	d1 f0       	breq	.+52     	; 0x10d2 <__fixunssfsi+0x46>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	1a f0       	brmi	.+6      	; 0x10ae <__fixunssfsi+0x22>
    10a8:	ba 95       	dec	r27
    10aa:	c9 f7       	brne	.-14     	; 0x109e <__fixunssfsi+0x12>
    10ac:	12 c0       	rjmp	.+36     	; 0x10d2 <__fixunssfsi+0x46>
    10ae:	b1 30       	cpi	r27, 0x01	; 1
    10b0:	81 f0       	breq	.+32     	; 0x10d2 <__fixunssfsi+0x46>
    10b2:	c3 d0       	rcall	.+390    	; 0x123a <__fp_zero>
    10b4:	b1 e0       	ldi	r27, 0x01	; 1
    10b6:	08 95       	ret
    10b8:	c0 c0       	rjmp	.+384    	; 0x123a <__fp_zero>
    10ba:	67 2f       	mov	r22, r23
    10bc:	78 2f       	mov	r23, r24
    10be:	88 27       	eor	r24, r24
    10c0:	b8 5f       	subi	r27, 0xF8	; 248
    10c2:	39 f0       	breq	.+14     	; 0x10d2 <__fixunssfsi+0x46>
    10c4:	b9 3f       	cpi	r27, 0xF9	; 249
    10c6:	cc f3       	brlt	.-14     	; 0x10ba <__fixunssfsi+0x2e>
    10c8:	86 95       	lsr	r24
    10ca:	77 95       	ror	r23
    10cc:	67 95       	ror	r22
    10ce:	b3 95       	inc	r27
    10d0:	d9 f7       	brne	.-10     	; 0x10c8 <__fixunssfsi+0x3c>
    10d2:	3e f4       	brtc	.+14     	; 0x10e2 <__fixunssfsi+0x56>
    10d4:	90 95       	com	r25
    10d6:	80 95       	com	r24
    10d8:	70 95       	com	r23
    10da:	61 95       	neg	r22
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	08 95       	ret

000010e4 <__floatunsisf>:
    10e4:	e8 94       	clt
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <__floatsisf+0x12>

000010e8 <__floatsisf>:
    10e8:	97 fb       	bst	r25, 7
    10ea:	3e f4       	brtc	.+14     	; 0x10fa <__floatsisf+0x12>
    10ec:	90 95       	com	r25
    10ee:	80 95       	com	r24
    10f0:	70 95       	com	r23
    10f2:	61 95       	neg	r22
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	8f 4f       	sbci	r24, 0xFF	; 255
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	99 23       	and	r25, r25
    10fc:	a9 f0       	breq	.+42     	; 0x1128 <__floatsisf+0x40>
    10fe:	f9 2f       	mov	r31, r25
    1100:	96 e9       	ldi	r25, 0x96	; 150
    1102:	bb 27       	eor	r27, r27
    1104:	93 95       	inc	r25
    1106:	f6 95       	lsr	r31
    1108:	87 95       	ror	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	b7 95       	ror	r27
    1110:	f1 11       	cpse	r31, r1
    1112:	f8 cf       	rjmp	.-16     	; 0x1104 <__floatsisf+0x1c>
    1114:	fa f4       	brpl	.+62     	; 0x1154 <__floatsisf+0x6c>
    1116:	bb 0f       	add	r27, r27
    1118:	11 f4       	brne	.+4      	; 0x111e <__floatsisf+0x36>
    111a:	60 ff       	sbrs	r22, 0
    111c:	1b c0       	rjmp	.+54     	; 0x1154 <__floatsisf+0x6c>
    111e:	6f 5f       	subi	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	16 c0       	rjmp	.+44     	; 0x1154 <__floatsisf+0x6c>
    1128:	88 23       	and	r24, r24
    112a:	11 f0       	breq	.+4      	; 0x1130 <__floatsisf+0x48>
    112c:	96 e9       	ldi	r25, 0x96	; 150
    112e:	11 c0       	rjmp	.+34     	; 0x1152 <__floatsisf+0x6a>
    1130:	77 23       	and	r23, r23
    1132:	21 f0       	breq	.+8      	; 0x113c <__floatsisf+0x54>
    1134:	9e e8       	ldi	r25, 0x8E	; 142
    1136:	87 2f       	mov	r24, r23
    1138:	76 2f       	mov	r23, r22
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <__floatsisf+0x5e>
    113c:	66 23       	and	r22, r22
    113e:	71 f0       	breq	.+28     	; 0x115c <__floatsisf+0x74>
    1140:	96 e8       	ldi	r25, 0x86	; 134
    1142:	86 2f       	mov	r24, r22
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	2a f0       	brmi	.+10     	; 0x1154 <__floatsisf+0x6c>
    114a:	9a 95       	dec	r25
    114c:	66 0f       	add	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	da f7       	brpl	.-10     	; 0x114a <__floatsisf+0x62>
    1154:	88 0f       	add	r24, r24
    1156:	96 95       	lsr	r25
    1158:	87 95       	ror	r24
    115a:	97 f9       	bld	r25, 7
    115c:	08 95       	ret

0000115e <__fp_cmp>:
    115e:	99 0f       	add	r25, r25
    1160:	00 08       	sbc	r0, r0
    1162:	55 0f       	add	r21, r21
    1164:	aa 0b       	sbc	r26, r26
    1166:	e0 e8       	ldi	r30, 0x80	; 128
    1168:	fe ef       	ldi	r31, 0xFE	; 254
    116a:	16 16       	cp	r1, r22
    116c:	17 06       	cpc	r1, r23
    116e:	e8 07       	cpc	r30, r24
    1170:	f9 07       	cpc	r31, r25
    1172:	c0 f0       	brcs	.+48     	; 0x11a4 <__fp_cmp+0x46>
    1174:	12 16       	cp	r1, r18
    1176:	13 06       	cpc	r1, r19
    1178:	e4 07       	cpc	r30, r20
    117a:	f5 07       	cpc	r31, r21
    117c:	98 f0       	brcs	.+38     	; 0x11a4 <__fp_cmp+0x46>
    117e:	62 1b       	sub	r22, r18
    1180:	73 0b       	sbc	r23, r19
    1182:	84 0b       	sbc	r24, r20
    1184:	95 0b       	sbc	r25, r21
    1186:	39 f4       	brne	.+14     	; 0x1196 <__fp_cmp+0x38>
    1188:	0a 26       	eor	r0, r26
    118a:	61 f0       	breq	.+24     	; 0x11a4 <__fp_cmp+0x46>
    118c:	23 2b       	or	r18, r19
    118e:	24 2b       	or	r18, r20
    1190:	25 2b       	or	r18, r21
    1192:	21 f4       	brne	.+8      	; 0x119c <__fp_cmp+0x3e>
    1194:	08 95       	ret
    1196:	0a 26       	eor	r0, r26
    1198:	09 f4       	brne	.+2      	; 0x119c <__fp_cmp+0x3e>
    119a:	a1 40       	sbci	r26, 0x01	; 1
    119c:	a6 95       	lsr	r26
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	81 1d       	adc	r24, r1
    11a2:	81 1d       	adc	r24, r1
    11a4:	08 95       	ret

000011a6 <__fp_inf>:
    11a6:	97 f9       	bld	r25, 7
    11a8:	9f 67       	ori	r25, 0x7F	; 127
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	08 95       	ret

000011b2 <__fp_nan>:
    11b2:	9f ef       	ldi	r25, 0xFF	; 255
    11b4:	80 ec       	ldi	r24, 0xC0	; 192
    11b6:	08 95       	ret

000011b8 <__fp_pscA>:
    11b8:	00 24       	eor	r0, r0
    11ba:	0a 94       	dec	r0
    11bc:	16 16       	cp	r1, r22
    11be:	17 06       	cpc	r1, r23
    11c0:	18 06       	cpc	r1, r24
    11c2:	09 06       	cpc	r0, r25
    11c4:	08 95       	ret

000011c6 <__fp_pscB>:
    11c6:	00 24       	eor	r0, r0
    11c8:	0a 94       	dec	r0
    11ca:	12 16       	cp	r1, r18
    11cc:	13 06       	cpc	r1, r19
    11ce:	14 06       	cpc	r1, r20
    11d0:	05 06       	cpc	r0, r21
    11d2:	08 95       	ret

000011d4 <__fp_round>:
    11d4:	09 2e       	mov	r0, r25
    11d6:	03 94       	inc	r0
    11d8:	00 0c       	add	r0, r0
    11da:	11 f4       	brne	.+4      	; 0x11e0 <__fp_round+0xc>
    11dc:	88 23       	and	r24, r24
    11de:	52 f0       	brmi	.+20     	; 0x11f4 <__fp_round+0x20>
    11e0:	bb 0f       	add	r27, r27
    11e2:	40 f4       	brcc	.+16     	; 0x11f4 <__fp_round+0x20>
    11e4:	bf 2b       	or	r27, r31
    11e6:	11 f4       	brne	.+4      	; 0x11ec <__fp_round+0x18>
    11e8:	60 ff       	sbrs	r22, 0
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <__fp_round+0x20>
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	08 95       	ret

000011f6 <__fp_split3>:
    11f6:	57 fd       	sbrc	r21, 7
    11f8:	90 58       	subi	r25, 0x80	; 128
    11fa:	44 0f       	add	r20, r20
    11fc:	55 1f       	adc	r21, r21
    11fe:	59 f0       	breq	.+22     	; 0x1216 <__fp_splitA+0x10>
    1200:	5f 3f       	cpi	r21, 0xFF	; 255
    1202:	71 f0       	breq	.+28     	; 0x1220 <__fp_splitA+0x1a>
    1204:	47 95       	ror	r20

00001206 <__fp_splitA>:
    1206:	88 0f       	add	r24, r24
    1208:	97 fb       	bst	r25, 7
    120a:	99 1f       	adc	r25, r25
    120c:	61 f0       	breq	.+24     	; 0x1226 <__fp_splitA+0x20>
    120e:	9f 3f       	cpi	r25, 0xFF	; 255
    1210:	79 f0       	breq	.+30     	; 0x1230 <__fp_splitA+0x2a>
    1212:	87 95       	ror	r24
    1214:	08 95       	ret
    1216:	12 16       	cp	r1, r18
    1218:	13 06       	cpc	r1, r19
    121a:	14 06       	cpc	r1, r20
    121c:	55 1f       	adc	r21, r21
    121e:	f2 cf       	rjmp	.-28     	; 0x1204 <__fp_split3+0xe>
    1220:	46 95       	lsr	r20
    1222:	f1 df       	rcall	.-30     	; 0x1206 <__fp_splitA>
    1224:	08 c0       	rjmp	.+16     	; 0x1236 <__fp_splitA+0x30>
    1226:	16 16       	cp	r1, r22
    1228:	17 06       	cpc	r1, r23
    122a:	18 06       	cpc	r1, r24
    122c:	99 1f       	adc	r25, r25
    122e:	f1 cf       	rjmp	.-30     	; 0x1212 <__fp_splitA+0xc>
    1230:	86 95       	lsr	r24
    1232:	71 05       	cpc	r23, r1
    1234:	61 05       	cpc	r22, r1
    1236:	08 94       	sec
    1238:	08 95       	ret

0000123a <__fp_zero>:
    123a:	e8 94       	clt

0000123c <__fp_szero>:
    123c:	bb 27       	eor	r27, r27
    123e:	66 27       	eor	r22, r22
    1240:	77 27       	eor	r23, r23
    1242:	cb 01       	movw	r24, r22
    1244:	97 f9       	bld	r25, 7
    1246:	08 95       	ret

00001248 <__mulsf3>:
    1248:	0b d0       	rcall	.+22     	; 0x1260 <__mulsf3x>
    124a:	c4 cf       	rjmp	.-120    	; 0x11d4 <__fp_round>
    124c:	b5 df       	rcall	.-150    	; 0x11b8 <__fp_pscA>
    124e:	28 f0       	brcs	.+10     	; 0x125a <__mulsf3+0x12>
    1250:	ba df       	rcall	.-140    	; 0x11c6 <__fp_pscB>
    1252:	18 f0       	brcs	.+6      	; 0x125a <__mulsf3+0x12>
    1254:	95 23       	and	r25, r21
    1256:	09 f0       	breq	.+2      	; 0x125a <__mulsf3+0x12>
    1258:	a6 cf       	rjmp	.-180    	; 0x11a6 <__fp_inf>
    125a:	ab cf       	rjmp	.-170    	; 0x11b2 <__fp_nan>
    125c:	11 24       	eor	r1, r1
    125e:	ee cf       	rjmp	.-36     	; 0x123c <__fp_szero>

00001260 <__mulsf3x>:
    1260:	ca df       	rcall	.-108    	; 0x11f6 <__fp_split3>
    1262:	a0 f3       	brcs	.-24     	; 0x124c <__mulsf3+0x4>

00001264 <__mulsf3_pse>:
    1264:	95 9f       	mul	r25, r21
    1266:	d1 f3       	breq	.-12     	; 0x125c <__mulsf3+0x14>
    1268:	95 0f       	add	r25, r21
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	55 1f       	adc	r21, r21
    126e:	62 9f       	mul	r22, r18
    1270:	f0 01       	movw	r30, r0
    1272:	72 9f       	mul	r23, r18
    1274:	bb 27       	eor	r27, r27
    1276:	f0 0d       	add	r31, r0
    1278:	b1 1d       	adc	r27, r1
    127a:	63 9f       	mul	r22, r19
    127c:	aa 27       	eor	r26, r26
    127e:	f0 0d       	add	r31, r0
    1280:	b1 1d       	adc	r27, r1
    1282:	aa 1f       	adc	r26, r26
    1284:	64 9f       	mul	r22, r20
    1286:	66 27       	eor	r22, r22
    1288:	b0 0d       	add	r27, r0
    128a:	a1 1d       	adc	r26, r1
    128c:	66 1f       	adc	r22, r22
    128e:	82 9f       	mul	r24, r18
    1290:	22 27       	eor	r18, r18
    1292:	b0 0d       	add	r27, r0
    1294:	a1 1d       	adc	r26, r1
    1296:	62 1f       	adc	r22, r18
    1298:	73 9f       	mul	r23, r19
    129a:	b0 0d       	add	r27, r0
    129c:	a1 1d       	adc	r26, r1
    129e:	62 1f       	adc	r22, r18
    12a0:	83 9f       	mul	r24, r19
    12a2:	a0 0d       	add	r26, r0
    12a4:	61 1d       	adc	r22, r1
    12a6:	22 1f       	adc	r18, r18
    12a8:	74 9f       	mul	r23, r20
    12aa:	33 27       	eor	r19, r19
    12ac:	a0 0d       	add	r26, r0
    12ae:	61 1d       	adc	r22, r1
    12b0:	23 1f       	adc	r18, r19
    12b2:	84 9f       	mul	r24, r20
    12b4:	60 0d       	add	r22, r0
    12b6:	21 1d       	adc	r18, r1
    12b8:	82 2f       	mov	r24, r18
    12ba:	76 2f       	mov	r23, r22
    12bc:	6a 2f       	mov	r22, r26
    12be:	11 24       	eor	r1, r1
    12c0:	9f 57       	subi	r25, 0x7F	; 127
    12c2:	50 40       	sbci	r21, 0x00	; 0
    12c4:	8a f0       	brmi	.+34     	; 0x12e8 <__mulsf3_pse+0x84>
    12c6:	e1 f0       	breq	.+56     	; 0x1300 <__mulsf3_pse+0x9c>
    12c8:	88 23       	and	r24, r24
    12ca:	4a f0       	brmi	.+18     	; 0x12de <__mulsf3_pse+0x7a>
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	bb 1f       	adc	r27, r27
    12d2:	66 1f       	adc	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	91 50       	subi	r25, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	a9 f7       	brne	.-22     	; 0x12c8 <__mulsf3_pse+0x64>
    12de:	9e 3f       	cpi	r25, 0xFE	; 254
    12e0:	51 05       	cpc	r21, r1
    12e2:	70 f0       	brcs	.+28     	; 0x1300 <__mulsf3_pse+0x9c>
    12e4:	60 cf       	rjmp	.-320    	; 0x11a6 <__fp_inf>
    12e6:	aa cf       	rjmp	.-172    	; 0x123c <__fp_szero>
    12e8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ea:	ec f3       	brlt	.-6      	; 0x12e6 <__mulsf3_pse+0x82>
    12ec:	98 3e       	cpi	r25, 0xE8	; 232
    12ee:	dc f3       	brlt	.-10     	; 0x12e6 <__mulsf3_pse+0x82>
    12f0:	86 95       	lsr	r24
    12f2:	77 95       	ror	r23
    12f4:	67 95       	ror	r22
    12f6:	b7 95       	ror	r27
    12f8:	f7 95       	ror	r31
    12fa:	e7 95       	ror	r30
    12fc:	9f 5f       	subi	r25, 0xFF	; 255
    12fe:	c1 f7       	brne	.-16     	; 0x12f0 <__mulsf3_pse+0x8c>
    1300:	fe 2b       	or	r31, r30
    1302:	88 0f       	add	r24, r24
    1304:	91 1d       	adc	r25, r1
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	97 f9       	bld	r25, 7
    130c:	08 95       	ret

0000130e <__divmodhi4>:
    130e:	97 fb       	bst	r25, 7
    1310:	09 2e       	mov	r0, r25
    1312:	07 26       	eor	r0, r23
    1314:	0a d0       	rcall	.+20     	; 0x132a <__divmodhi4_neg1>
    1316:	77 fd       	sbrc	r23, 7
    1318:	04 d0       	rcall	.+8      	; 0x1322 <__divmodhi4_neg2>
    131a:	0c d0       	rcall	.+24     	; 0x1334 <__udivmodhi4>
    131c:	06 d0       	rcall	.+12     	; 0x132a <__divmodhi4_neg1>
    131e:	00 20       	and	r0, r0
    1320:	1a f4       	brpl	.+6      	; 0x1328 <__divmodhi4_exit>

00001322 <__divmodhi4_neg2>:
    1322:	70 95       	com	r23
    1324:	61 95       	neg	r22
    1326:	7f 4f       	sbci	r23, 0xFF	; 255

00001328 <__divmodhi4_exit>:
    1328:	08 95       	ret

0000132a <__divmodhi4_neg1>:
    132a:	f6 f7       	brtc	.-4      	; 0x1328 <__divmodhi4_exit>
    132c:	90 95       	com	r25
    132e:	81 95       	neg	r24
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	08 95       	ret

00001334 <__udivmodhi4>:
    1334:	aa 1b       	sub	r26, r26
    1336:	bb 1b       	sub	r27, r27
    1338:	51 e1       	ldi	r21, 0x11	; 17
    133a:	07 c0       	rjmp	.+14     	; 0x134a <__udivmodhi4_ep>

0000133c <__udivmodhi4_loop>:
    133c:	aa 1f       	adc	r26, r26
    133e:	bb 1f       	adc	r27, r27
    1340:	a6 17       	cp	r26, r22
    1342:	b7 07       	cpc	r27, r23
    1344:	10 f0       	brcs	.+4      	; 0x134a <__udivmodhi4_ep>
    1346:	a6 1b       	sub	r26, r22
    1348:	b7 0b       	sbc	r27, r23

0000134a <__udivmodhi4_ep>:
    134a:	88 1f       	adc	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	5a 95       	dec	r21
    1350:	a9 f7       	brne	.-22     	; 0x133c <__udivmodhi4_loop>
    1352:	80 95       	com	r24
    1354:	90 95       	com	r25
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	08 95       	ret

0000135c <sprintf>:
    135c:	ae e0       	ldi	r26, 0x0E	; 14
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 eb       	ldi	r30, 0xB4	; 180
    1362:	f9 e0       	ldi	r31, 0x09	; 9
    1364:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__prologue_saves__+0x1c>
    1368:	0d 89       	ldd	r16, Y+21	; 0x15
    136a:	1e 89       	ldd	r17, Y+22	; 0x16
    136c:	86 e0       	ldi	r24, 0x06	; 6
    136e:	8c 83       	std	Y+4, r24	; 0x04
    1370:	1a 83       	std	Y+2, r17	; 0x02
    1372:	09 83       	std	Y+1, r16	; 0x01
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	9f e7       	ldi	r25, 0x7F	; 127
    1378:	9e 83       	std	Y+6, r25	; 0x06
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	ae 01       	movw	r20, r28
    137e:	47 5e       	subi	r20, 0xE7	; 231
    1380:	5f 4f       	sbci	r21, 0xFF	; 255
    1382:	ce 01       	movw	r24, r28
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	6f 89       	ldd	r22, Y+23	; 0x17
    1388:	78 8d       	ldd	r23, Y+24	; 0x18
    138a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <vfprintf>
    138e:	ef 81       	ldd	r30, Y+7	; 0x07
    1390:	f8 85       	ldd	r31, Y+8	; 0x08
    1392:	e0 0f       	add	r30, r16
    1394:	f1 1f       	adc	r31, r17
    1396:	10 82       	st	Z, r1
    1398:	2e 96       	adiw	r28, 0x0e	; 14
    139a:	e4 e0       	ldi	r30, 0x04	; 4
    139c:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__epilogue_restores__+0x1c>

000013a0 <vfprintf>:
    13a0:	ad e0       	ldi	r26, 0x0D	; 13
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e6 ed       	ldi	r30, 0xD6	; 214
    13a6:	f9 e0       	ldi	r31, 0x09	; 9
    13a8:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__prologue_saves__>
    13ac:	3c 01       	movw	r6, r24
    13ae:	7d 87       	std	Y+13, r23	; 0x0d
    13b0:	6c 87       	std	Y+12, r22	; 0x0c
    13b2:	5a 01       	movw	r10, r20
    13b4:	fc 01       	movw	r30, r24
    13b6:	17 82       	std	Z+7, r1	; 0x07
    13b8:	16 82       	std	Z+6, r1	; 0x06
    13ba:	83 81       	ldd	r24, Z+3	; 0x03
    13bc:	81 ff       	sbrs	r24, 1
    13be:	c8 c1       	rjmp	.+912    	; 0x1750 <vfprintf+0x3b0>
    13c0:	2e 01       	movw	r4, r28
    13c2:	08 94       	sec
    13c4:	41 1c       	adc	r4, r1
    13c6:	51 1c       	adc	r5, r1
    13c8:	f3 01       	movw	r30, r6
    13ca:	93 81       	ldd	r25, Z+3	; 0x03
    13cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    13ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    13d0:	93 fd       	sbrc	r25, 3
    13d2:	85 91       	lpm	r24, Z+
    13d4:	93 ff       	sbrs	r25, 3
    13d6:	81 91       	ld	r24, Z+
    13d8:	fd 87       	std	Y+13, r31	; 0x0d
    13da:	ec 87       	std	Y+12, r30	; 0x0c
    13dc:	88 23       	and	r24, r24
    13de:	09 f4       	brne	.+2      	; 0x13e2 <vfprintf+0x42>
    13e0:	b3 c1       	rjmp	.+870    	; 0x1748 <vfprintf+0x3a8>
    13e2:	85 32       	cpi	r24, 0x25	; 37
    13e4:	41 f4       	brne	.+16     	; 0x13f6 <vfprintf+0x56>
    13e6:	93 fd       	sbrc	r25, 3
    13e8:	85 91       	lpm	r24, Z+
    13ea:	93 ff       	sbrs	r25, 3
    13ec:	81 91       	ld	r24, Z+
    13ee:	fd 87       	std	Y+13, r31	; 0x0d
    13f0:	ec 87       	std	Y+12, r30	; 0x0c
    13f2:	85 32       	cpi	r24, 0x25	; 37
    13f4:	29 f4       	brne	.+10     	; 0x1400 <vfprintf+0x60>
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	b3 01       	movw	r22, r6
    13fa:	0e 94 c4 0b 	call	0x1788	; 0x1788 <fputc>
    13fe:	e4 cf       	rjmp	.-56     	; 0x13c8 <vfprintf+0x28>
    1400:	ff 24       	eor	r15, r15
    1402:	ee 24       	eor	r14, r14
    1404:	10 e0       	ldi	r17, 0x00	; 0
    1406:	10 32       	cpi	r17, 0x20	; 32
    1408:	b0 f4       	brcc	.+44     	; 0x1436 <vfprintf+0x96>
    140a:	8b 32       	cpi	r24, 0x2B	; 43
    140c:	69 f0       	breq	.+26     	; 0x1428 <vfprintf+0x88>
    140e:	8c 32       	cpi	r24, 0x2C	; 44
    1410:	28 f4       	brcc	.+10     	; 0x141c <vfprintf+0x7c>
    1412:	80 32       	cpi	r24, 0x20	; 32
    1414:	51 f0       	breq	.+20     	; 0x142a <vfprintf+0x8a>
    1416:	83 32       	cpi	r24, 0x23	; 35
    1418:	71 f4       	brne	.+28     	; 0x1436 <vfprintf+0x96>
    141a:	0b c0       	rjmp	.+22     	; 0x1432 <vfprintf+0x92>
    141c:	8d 32       	cpi	r24, 0x2D	; 45
    141e:	39 f0       	breq	.+14     	; 0x142e <vfprintf+0x8e>
    1420:	80 33       	cpi	r24, 0x30	; 48
    1422:	49 f4       	brne	.+18     	; 0x1436 <vfprintf+0x96>
    1424:	11 60       	ori	r17, 0x01	; 1
    1426:	2c c0       	rjmp	.+88     	; 0x1480 <vfprintf+0xe0>
    1428:	12 60       	ori	r17, 0x02	; 2
    142a:	14 60       	ori	r17, 0x04	; 4
    142c:	29 c0       	rjmp	.+82     	; 0x1480 <vfprintf+0xe0>
    142e:	18 60       	ori	r17, 0x08	; 8
    1430:	27 c0       	rjmp	.+78     	; 0x1480 <vfprintf+0xe0>
    1432:	10 61       	ori	r17, 0x10	; 16
    1434:	25 c0       	rjmp	.+74     	; 0x1480 <vfprintf+0xe0>
    1436:	17 fd       	sbrc	r17, 7
    1438:	2e c0       	rjmp	.+92     	; 0x1496 <vfprintf+0xf6>
    143a:	28 2f       	mov	r18, r24
    143c:	20 53       	subi	r18, 0x30	; 48
    143e:	2a 30       	cpi	r18, 0x0A	; 10
    1440:	98 f4       	brcc	.+38     	; 0x1468 <vfprintf+0xc8>
    1442:	16 ff       	sbrs	r17, 6
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <vfprintf+0xb6>
    1446:	8f 2d       	mov	r24, r15
    1448:	88 0f       	add	r24, r24
    144a:	f8 2e       	mov	r15, r24
    144c:	ff 0c       	add	r15, r15
    144e:	ff 0c       	add	r15, r15
    1450:	f8 0e       	add	r15, r24
    1452:	f2 0e       	add	r15, r18
    1454:	15 c0       	rjmp	.+42     	; 0x1480 <vfprintf+0xe0>
    1456:	8e 2d       	mov	r24, r14
    1458:	88 0f       	add	r24, r24
    145a:	e8 2e       	mov	r14, r24
    145c:	ee 0c       	add	r14, r14
    145e:	ee 0c       	add	r14, r14
    1460:	e8 0e       	add	r14, r24
    1462:	e2 0e       	add	r14, r18
    1464:	10 62       	ori	r17, 0x20	; 32
    1466:	0c c0       	rjmp	.+24     	; 0x1480 <vfprintf+0xe0>
    1468:	8e 32       	cpi	r24, 0x2E	; 46
    146a:	21 f4       	brne	.+8      	; 0x1474 <vfprintf+0xd4>
    146c:	16 fd       	sbrc	r17, 6
    146e:	6c c1       	rjmp	.+728    	; 0x1748 <vfprintf+0x3a8>
    1470:	10 64       	ori	r17, 0x40	; 64
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <vfprintf+0xe0>
    1474:	8c 36       	cpi	r24, 0x6C	; 108
    1476:	11 f4       	brne	.+4      	; 0x147c <vfprintf+0xdc>
    1478:	10 68       	ori	r17, 0x80	; 128
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <vfprintf+0xe0>
    147c:	88 36       	cpi	r24, 0x68	; 104
    147e:	59 f4       	brne	.+22     	; 0x1496 <vfprintf+0xf6>
    1480:	ec 85       	ldd	r30, Y+12	; 0x0c
    1482:	fd 85       	ldd	r31, Y+13	; 0x0d
    1484:	93 fd       	sbrc	r25, 3
    1486:	85 91       	lpm	r24, Z+
    1488:	93 ff       	sbrs	r25, 3
    148a:	81 91       	ld	r24, Z+
    148c:	fd 87       	std	Y+13, r31	; 0x0d
    148e:	ec 87       	std	Y+12, r30	; 0x0c
    1490:	88 23       	and	r24, r24
    1492:	09 f0       	breq	.+2      	; 0x1496 <vfprintf+0xf6>
    1494:	b8 cf       	rjmp	.-144    	; 0x1406 <vfprintf+0x66>
    1496:	98 2f       	mov	r25, r24
    1498:	95 54       	subi	r25, 0x45	; 69
    149a:	93 30       	cpi	r25, 0x03	; 3
    149c:	18 f0       	brcs	.+6      	; 0x14a4 <vfprintf+0x104>
    149e:	90 52       	subi	r25, 0x20	; 32
    14a0:	93 30       	cpi	r25, 0x03	; 3
    14a2:	38 f4       	brcc	.+14     	; 0x14b2 <vfprintf+0x112>
    14a4:	24 e0       	ldi	r18, 0x04	; 4
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	a2 0e       	add	r10, r18
    14aa:	b3 1e       	adc	r11, r19
    14ac:	3f e3       	ldi	r19, 0x3F	; 63
    14ae:	39 83       	std	Y+1, r19	; 0x01
    14b0:	0f c0       	rjmp	.+30     	; 0x14d0 <vfprintf+0x130>
    14b2:	83 36       	cpi	r24, 0x63	; 99
    14b4:	31 f0       	breq	.+12     	; 0x14c2 <vfprintf+0x122>
    14b6:	83 37       	cpi	r24, 0x73	; 115
    14b8:	81 f0       	breq	.+32     	; 0x14da <vfprintf+0x13a>
    14ba:	83 35       	cpi	r24, 0x53	; 83
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <vfprintf+0x120>
    14be:	5a c0       	rjmp	.+180    	; 0x1574 <vfprintf+0x1d4>
    14c0:	22 c0       	rjmp	.+68     	; 0x1506 <vfprintf+0x166>
    14c2:	f5 01       	movw	r30, r10
    14c4:	80 81       	ld	r24, Z
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	22 e0       	ldi	r18, 0x02	; 2
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	a2 0e       	add	r10, r18
    14ce:	b3 1e       	adc	r11, r19
    14d0:	21 e0       	ldi	r18, 0x01	; 1
    14d2:	c2 2e       	mov	r12, r18
    14d4:	d1 2c       	mov	r13, r1
    14d6:	42 01       	movw	r8, r4
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <vfprintf+0x162>
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	29 2e       	mov	r2, r25
    14de:	31 2c       	mov	r3, r1
    14e0:	2a 0c       	add	r2, r10
    14e2:	3b 1c       	adc	r3, r11
    14e4:	f5 01       	movw	r30, r10
    14e6:	80 80       	ld	r8, Z
    14e8:	91 80       	ldd	r9, Z+1	; 0x01
    14ea:	16 ff       	sbrs	r17, 6
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <vfprintf+0x154>
    14ee:	6f 2d       	mov	r22, r15
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0x158>
    14f4:	6f ef       	ldi	r22, 0xFF	; 255
    14f6:	7f ef       	ldi	r23, 0xFF	; 255
    14f8:	c4 01       	movw	r24, r8
    14fa:	0e 94 b9 0b 	call	0x1772	; 0x1772 <strnlen>
    14fe:	6c 01       	movw	r12, r24
    1500:	51 01       	movw	r10, r2
    1502:	1f 77       	andi	r17, 0x7F	; 127
    1504:	15 c0       	rjmp	.+42     	; 0x1530 <vfprintf+0x190>
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	28 2e       	mov	r2, r24
    150a:	31 2c       	mov	r3, r1
    150c:	2a 0c       	add	r2, r10
    150e:	3b 1c       	adc	r3, r11
    1510:	f5 01       	movw	r30, r10
    1512:	80 80       	ld	r8, Z
    1514:	91 80       	ldd	r9, Z+1	; 0x01
    1516:	16 ff       	sbrs	r17, 6
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <vfprintf+0x180>
    151a:	6f 2d       	mov	r22, r15
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <vfprintf+0x184>
    1520:	6f ef       	ldi	r22, 0xFF	; 255
    1522:	7f ef       	ldi	r23, 0xFF	; 255
    1524:	c4 01       	movw	r24, r8
    1526:	0e 94 ae 0b 	call	0x175c	; 0x175c <strnlen_P>
    152a:	6c 01       	movw	r12, r24
    152c:	10 68       	ori	r17, 0x80	; 128
    152e:	51 01       	movw	r10, r2
    1530:	13 fd       	sbrc	r17, 3
    1532:	1c c0       	rjmp	.+56     	; 0x156c <vfprintf+0x1cc>
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <vfprintf+0x1a2>
    1536:	80 e2       	ldi	r24, 0x20	; 32
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	b3 01       	movw	r22, r6
    153c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <fputc>
    1540:	ea 94       	dec	r14
    1542:	8e 2d       	mov	r24, r14
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	c8 16       	cp	r12, r24
    1548:	d9 06       	cpc	r13, r25
    154a:	a8 f3       	brcs	.-22     	; 0x1536 <vfprintf+0x196>
    154c:	0f c0       	rjmp	.+30     	; 0x156c <vfprintf+0x1cc>
    154e:	f4 01       	movw	r30, r8
    1550:	17 fd       	sbrc	r17, 7
    1552:	85 91       	lpm	r24, Z+
    1554:	17 ff       	sbrs	r17, 7
    1556:	81 91       	ld	r24, Z+
    1558:	4f 01       	movw	r8, r30
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	b3 01       	movw	r22, r6
    155e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <fputc>
    1562:	e1 10       	cpse	r14, r1
    1564:	ea 94       	dec	r14
    1566:	08 94       	sec
    1568:	c1 08       	sbc	r12, r1
    156a:	d1 08       	sbc	r13, r1
    156c:	c1 14       	cp	r12, r1
    156e:	d1 04       	cpc	r13, r1
    1570:	71 f7       	brne	.-36     	; 0x154e <vfprintf+0x1ae>
    1572:	e7 c0       	rjmp	.+462    	; 0x1742 <vfprintf+0x3a2>
    1574:	84 36       	cpi	r24, 0x64	; 100
    1576:	11 f0       	breq	.+4      	; 0x157c <vfprintf+0x1dc>
    1578:	89 36       	cpi	r24, 0x69	; 105
    157a:	51 f5       	brne	.+84     	; 0x15d0 <vfprintf+0x230>
    157c:	f5 01       	movw	r30, r10
    157e:	17 ff       	sbrs	r17, 7
    1580:	07 c0       	rjmp	.+14     	; 0x1590 <vfprintf+0x1f0>
    1582:	80 81       	ld	r24, Z
    1584:	91 81       	ldd	r25, Z+1	; 0x01
    1586:	a2 81       	ldd	r26, Z+2	; 0x02
    1588:	b3 81       	ldd	r27, Z+3	; 0x03
    158a:	24 e0       	ldi	r18, 0x04	; 4
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	08 c0       	rjmp	.+16     	; 0x15a0 <vfprintf+0x200>
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	aa 27       	eor	r26, r26
    1596:	97 fd       	sbrc	r25, 7
    1598:	a0 95       	com	r26
    159a:	ba 2f       	mov	r27, r26
    159c:	22 e0       	ldi	r18, 0x02	; 2
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	a2 0e       	add	r10, r18
    15a2:	b3 1e       	adc	r11, r19
    15a4:	01 2f       	mov	r16, r17
    15a6:	0f 76       	andi	r16, 0x6F	; 111
    15a8:	b7 ff       	sbrs	r27, 7
    15aa:	08 c0       	rjmp	.+16     	; 0x15bc <vfprintf+0x21c>
    15ac:	b0 95       	com	r27
    15ae:	a0 95       	com	r26
    15b0:	90 95       	com	r25
    15b2:	81 95       	neg	r24
    15b4:	9f 4f       	sbci	r25, 0xFF	; 255
    15b6:	af 4f       	sbci	r26, 0xFF	; 255
    15b8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ba:	00 68       	ori	r16, 0x80	; 128
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	a2 01       	movw	r20, r4
    15c2:	2a e0       	ldi	r18, 0x0A	; 10
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__ultoa_invert>
    15ca:	d8 2e       	mov	r13, r24
    15cc:	d4 18       	sub	r13, r4
    15ce:	3f c0       	rjmp	.+126    	; 0x164e <vfprintf+0x2ae>
    15d0:	85 37       	cpi	r24, 0x75	; 117
    15d2:	21 f4       	brne	.+8      	; 0x15dc <vfprintf+0x23c>
    15d4:	1f 7e       	andi	r17, 0xEF	; 239
    15d6:	2a e0       	ldi	r18, 0x0A	; 10
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	20 c0       	rjmp	.+64     	; 0x161c <vfprintf+0x27c>
    15dc:	19 7f       	andi	r17, 0xF9	; 249
    15de:	8f 36       	cpi	r24, 0x6F	; 111
    15e0:	a9 f0       	breq	.+42     	; 0x160c <vfprintf+0x26c>
    15e2:	80 37       	cpi	r24, 0x70	; 112
    15e4:	20 f4       	brcc	.+8      	; 0x15ee <vfprintf+0x24e>
    15e6:	88 35       	cpi	r24, 0x58	; 88
    15e8:	09 f0       	breq	.+2      	; 0x15ec <vfprintf+0x24c>
    15ea:	ae c0       	rjmp	.+348    	; 0x1748 <vfprintf+0x3a8>
    15ec:	0b c0       	rjmp	.+22     	; 0x1604 <vfprintf+0x264>
    15ee:	80 37       	cpi	r24, 0x70	; 112
    15f0:	21 f0       	breq	.+8      	; 0x15fa <vfprintf+0x25a>
    15f2:	88 37       	cpi	r24, 0x78	; 120
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <vfprintf+0x258>
    15f6:	a8 c0       	rjmp	.+336    	; 0x1748 <vfprintf+0x3a8>
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <vfprintf+0x25c>
    15fa:	10 61       	ori	r17, 0x10	; 16
    15fc:	14 ff       	sbrs	r17, 4
    15fe:	09 c0       	rjmp	.+18     	; 0x1612 <vfprintf+0x272>
    1600:	14 60       	ori	r17, 0x04	; 4
    1602:	07 c0       	rjmp	.+14     	; 0x1612 <vfprintf+0x272>
    1604:	14 ff       	sbrs	r17, 4
    1606:	08 c0       	rjmp	.+16     	; 0x1618 <vfprintf+0x278>
    1608:	16 60       	ori	r17, 0x06	; 6
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <vfprintf+0x278>
    160c:	28 e0       	ldi	r18, 0x08	; 8
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	05 c0       	rjmp	.+10     	; 0x161c <vfprintf+0x27c>
    1612:	20 e1       	ldi	r18, 0x10	; 16
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	02 c0       	rjmp	.+4      	; 0x161c <vfprintf+0x27c>
    1618:	20 e1       	ldi	r18, 0x10	; 16
    161a:	32 e0       	ldi	r19, 0x02	; 2
    161c:	f5 01       	movw	r30, r10
    161e:	17 ff       	sbrs	r17, 7
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <vfprintf+0x290>
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	44 e0       	ldi	r20, 0x04	; 4
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	06 c0       	rjmp	.+12     	; 0x163c <vfprintf+0x29c>
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	42 e0       	ldi	r20, 0x02	; 2
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	a4 0e       	add	r10, r20
    163e:	b5 1e       	adc	r11, r21
    1640:	a2 01       	movw	r20, r4
    1642:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__ultoa_invert>
    1646:	d8 2e       	mov	r13, r24
    1648:	d4 18       	sub	r13, r4
    164a:	01 2f       	mov	r16, r17
    164c:	0f 77       	andi	r16, 0x7F	; 127
    164e:	06 ff       	sbrs	r16, 6
    1650:	09 c0       	rjmp	.+18     	; 0x1664 <vfprintf+0x2c4>
    1652:	0e 7f       	andi	r16, 0xFE	; 254
    1654:	df 14       	cp	r13, r15
    1656:	30 f4       	brcc	.+12     	; 0x1664 <vfprintf+0x2c4>
    1658:	04 ff       	sbrs	r16, 4
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0x2c8>
    165c:	02 fd       	sbrc	r16, 2
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <vfprintf+0x2c8>
    1660:	0f 7e       	andi	r16, 0xEF	; 239
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <vfprintf+0x2c8>
    1664:	1d 2d       	mov	r17, r13
    1666:	01 c0       	rjmp	.+2      	; 0x166a <vfprintf+0x2ca>
    1668:	1f 2d       	mov	r17, r15
    166a:	80 2f       	mov	r24, r16
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	04 ff       	sbrs	r16, 4
    1670:	0c c0       	rjmp	.+24     	; 0x168a <vfprintf+0x2ea>
    1672:	fe 01       	movw	r30, r28
    1674:	ed 0d       	add	r30, r13
    1676:	f1 1d       	adc	r31, r1
    1678:	20 81       	ld	r18, Z
    167a:	20 33       	cpi	r18, 0x30	; 48
    167c:	11 f4       	brne	.+4      	; 0x1682 <vfprintf+0x2e2>
    167e:	09 7e       	andi	r16, 0xE9	; 233
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <vfprintf+0x2f4>
    1682:	02 ff       	sbrs	r16, 2
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <vfprintf+0x2f2>
    1686:	1e 5f       	subi	r17, 0xFE	; 254
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <vfprintf+0x2f4>
    168a:	86 78       	andi	r24, 0x86	; 134
    168c:	90 70       	andi	r25, 0x00	; 0
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	09 f0       	breq	.+2      	; 0x1694 <vfprintf+0x2f4>
    1692:	1f 5f       	subi	r17, 0xFF	; 255
    1694:	80 2e       	mov	r8, r16
    1696:	99 24       	eor	r9, r9
    1698:	03 fd       	sbrc	r16, 3
    169a:	12 c0       	rjmp	.+36     	; 0x16c0 <vfprintf+0x320>
    169c:	00 ff       	sbrs	r16, 0
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <vfprintf+0x31a>
    16a0:	fd 2c       	mov	r15, r13
    16a2:	1e 15       	cp	r17, r14
    16a4:	50 f4       	brcc	.+20     	; 0x16ba <vfprintf+0x31a>
    16a6:	fe 0c       	add	r15, r14
    16a8:	f1 1a       	sub	r15, r17
    16aa:	1e 2d       	mov	r17, r14
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x31a>
    16ae:	80 e2       	ldi	r24, 0x20	; 32
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	b3 01       	movw	r22, r6
    16b4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <fputc>
    16b8:	1f 5f       	subi	r17, 0xFF	; 255
    16ba:	1e 15       	cp	r17, r14
    16bc:	c0 f3       	brcs	.-16     	; 0x16ae <vfprintf+0x30e>
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <vfprintf+0x328>
    16c0:	1e 15       	cp	r17, r14
    16c2:	10 f4       	brcc	.+4      	; 0x16c8 <vfprintf+0x328>
    16c4:	e1 1a       	sub	r14, r17
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <vfprintf+0x32a>
    16c8:	ee 24       	eor	r14, r14
    16ca:	84 fe       	sbrs	r8, 4
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <vfprintf+0x34c>
    16ce:	80 e3       	ldi	r24, 0x30	; 48
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	b3 01       	movw	r22, r6
    16d4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <fputc>
    16d8:	82 fe       	sbrs	r8, 2
    16da:	1f c0       	rjmp	.+62     	; 0x171a <vfprintf+0x37a>
    16dc:	81 fe       	sbrs	r8, 1
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <vfprintf+0x346>
    16e0:	88 e5       	ldi	r24, 0x58	; 88
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	10 c0       	rjmp	.+32     	; 0x1706 <vfprintf+0x366>
    16e6:	88 e7       	ldi	r24, 0x78	; 120
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <vfprintf+0x366>
    16ec:	c4 01       	movw	r24, r8
    16ee:	86 78       	andi	r24, 0x86	; 134
    16f0:	90 70       	andi	r25, 0x00	; 0
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	91 f0       	breq	.+36     	; 0x171a <vfprintf+0x37a>
    16f6:	81 fc       	sbrc	r8, 1
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <vfprintf+0x35e>
    16fa:	80 e2       	ldi	r24, 0x20	; 32
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <vfprintf+0x360>
    16fe:	8b e2       	ldi	r24, 0x2B	; 43
    1700:	07 fd       	sbrc	r16, 7
    1702:	8d e2       	ldi	r24, 0x2D	; 45
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	b3 01       	movw	r22, r6
    1708:	0e 94 c4 0b 	call	0x1788	; 0x1788 <fputc>
    170c:	06 c0       	rjmp	.+12     	; 0x171a <vfprintf+0x37a>
    170e:	80 e3       	ldi	r24, 0x30	; 48
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	b3 01       	movw	r22, r6
    1714:	0e 94 c4 0b 	call	0x1788	; 0x1788 <fputc>
    1718:	fa 94       	dec	r15
    171a:	df 14       	cp	r13, r15
    171c:	c0 f3       	brcs	.-16     	; 0x170e <vfprintf+0x36e>
    171e:	da 94       	dec	r13
    1720:	f2 01       	movw	r30, r4
    1722:	ed 0d       	add	r30, r13
    1724:	f1 1d       	adc	r31, r1
    1726:	80 81       	ld	r24, Z
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	b3 01       	movw	r22, r6
    172c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <fputc>
    1730:	dd 20       	and	r13, r13
    1732:	a9 f7       	brne	.-22     	; 0x171e <vfprintf+0x37e>
    1734:	06 c0       	rjmp	.+12     	; 0x1742 <vfprintf+0x3a2>
    1736:	80 e2       	ldi	r24, 0x20	; 32
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	b3 01       	movw	r22, r6
    173c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <fputc>
    1740:	ea 94       	dec	r14
    1742:	ee 20       	and	r14, r14
    1744:	c1 f7       	brne	.-16     	; 0x1736 <vfprintf+0x396>
    1746:	40 ce       	rjmp	.-896    	; 0x13c8 <vfprintf+0x28>
    1748:	f3 01       	movw	r30, r6
    174a:	86 81       	ldd	r24, Z+6	; 0x06
    174c:	97 81       	ldd	r25, Z+7	; 0x07
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <vfprintf+0x3b4>
    1750:	8f ef       	ldi	r24, 0xFF	; 255
    1752:	9f ef       	ldi	r25, 0xFF	; 255
    1754:	2d 96       	adiw	r28, 0x0d	; 13
    1756:	e2 e1       	ldi	r30, 0x12	; 18
    1758:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__epilogue_restores__>

0000175c <strnlen_P>:
    175c:	fc 01       	movw	r30, r24
    175e:	05 90       	lpm	r0, Z+
    1760:	61 50       	subi	r22, 0x01	; 1
    1762:	70 40       	sbci	r23, 0x00	; 0
    1764:	01 10       	cpse	r0, r1
    1766:	d8 f7       	brcc	.-10     	; 0x175e <strnlen_P+0x2>
    1768:	80 95       	com	r24
    176a:	90 95       	com	r25
    176c:	8e 0f       	add	r24, r30
    176e:	9f 1f       	adc	r25, r31
    1770:	08 95       	ret

00001772 <strnlen>:
    1772:	fc 01       	movw	r30, r24
    1774:	61 50       	subi	r22, 0x01	; 1
    1776:	70 40       	sbci	r23, 0x00	; 0
    1778:	01 90       	ld	r0, Z+
    177a:	01 10       	cpse	r0, r1
    177c:	d8 f7       	brcc	.-10     	; 0x1774 <strnlen+0x2>
    177e:	80 95       	com	r24
    1780:	90 95       	com	r25
    1782:	8e 0f       	add	r24, r30
    1784:	9f 1f       	adc	r25, r31
    1786:	08 95       	ret

00001788 <fputc>:
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	8c 01       	movw	r16, r24
    1792:	eb 01       	movw	r28, r22
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	81 ff       	sbrs	r24, 1
    1798:	1b c0       	rjmp	.+54     	; 0x17d0 <fputc+0x48>
    179a:	82 ff       	sbrs	r24, 2
    179c:	0d c0       	rjmp	.+26     	; 0x17b8 <fputc+0x30>
    179e:	2e 81       	ldd	r18, Y+6	; 0x06
    17a0:	3f 81       	ldd	r19, Y+7	; 0x07
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	28 17       	cp	r18, r24
    17a8:	39 07       	cpc	r19, r25
    17aa:	64 f4       	brge	.+24     	; 0x17c4 <fputc+0x3c>
    17ac:	e8 81       	ld	r30, Y
    17ae:	f9 81       	ldd	r31, Y+1	; 0x01
    17b0:	01 93       	st	Z+, r16
    17b2:	f9 83       	std	Y+1, r31	; 0x01
    17b4:	e8 83       	st	Y, r30
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <fputc+0x3c>
    17b8:	e8 85       	ldd	r30, Y+8	; 0x08
    17ba:	f9 85       	ldd	r31, Y+9	; 0x09
    17bc:	80 2f       	mov	r24, r16
    17be:	09 95       	icall
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	31 f4       	brne	.+12     	; 0x17d0 <fputc+0x48>
    17c4:	8e 81       	ldd	r24, Y+6	; 0x06
    17c6:	9f 81       	ldd	r25, Y+7	; 0x07
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	9f 83       	std	Y+7, r25	; 0x07
    17cc:	8e 83       	std	Y+6, r24	; 0x06
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <fputc+0x4c>
    17d0:	0f ef       	ldi	r16, 0xFF	; 255
    17d2:	1f ef       	ldi	r17, 0xFF	; 255
    17d4:	c8 01       	movw	r24, r16
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <__ultoa_invert>:
    17e0:	fa 01       	movw	r30, r20
    17e2:	aa 27       	eor	r26, r26
    17e4:	28 30       	cpi	r18, 0x08	; 8
    17e6:	51 f1       	breq	.+84     	; 0x183c <__ultoa_invert+0x5c>
    17e8:	20 31       	cpi	r18, 0x10	; 16
    17ea:	81 f1       	breq	.+96     	; 0x184c <__ultoa_invert+0x6c>
    17ec:	e8 94       	clt
    17ee:	6f 93       	push	r22
    17f0:	6e 7f       	andi	r22, 0xFE	; 254
    17f2:	6e 5f       	subi	r22, 0xFE	; 254
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	8f 4f       	sbci	r24, 0xFF	; 255
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	af 4f       	sbci	r26, 0xFF	; 255
    17fc:	b1 e0       	ldi	r27, 0x01	; 1
    17fe:	3e d0       	rcall	.+124    	; 0x187c <__ultoa_invert+0x9c>
    1800:	b4 e0       	ldi	r27, 0x04	; 4
    1802:	3c d0       	rcall	.+120    	; 0x187c <__ultoa_invert+0x9c>
    1804:	67 0f       	add	r22, r23
    1806:	78 1f       	adc	r23, r24
    1808:	89 1f       	adc	r24, r25
    180a:	9a 1f       	adc	r25, r26
    180c:	a1 1d       	adc	r26, r1
    180e:	68 0f       	add	r22, r24
    1810:	79 1f       	adc	r23, r25
    1812:	8a 1f       	adc	r24, r26
    1814:	91 1d       	adc	r25, r1
    1816:	a1 1d       	adc	r26, r1
    1818:	6a 0f       	add	r22, r26
    181a:	71 1d       	adc	r23, r1
    181c:	81 1d       	adc	r24, r1
    181e:	91 1d       	adc	r25, r1
    1820:	a1 1d       	adc	r26, r1
    1822:	20 d0       	rcall	.+64     	; 0x1864 <__ultoa_invert+0x84>
    1824:	09 f4       	brne	.+2      	; 0x1828 <__ultoa_invert+0x48>
    1826:	68 94       	set
    1828:	3f 91       	pop	r19
    182a:	2a e0       	ldi	r18, 0x0A	; 10
    182c:	26 9f       	mul	r18, r22
    182e:	11 24       	eor	r1, r1
    1830:	30 19       	sub	r19, r0
    1832:	30 5d       	subi	r19, 0xD0	; 208
    1834:	31 93       	st	Z+, r19
    1836:	de f6       	brtc	.-74     	; 0x17ee <__ultoa_invert+0xe>
    1838:	cf 01       	movw	r24, r30
    183a:	08 95       	ret
    183c:	46 2f       	mov	r20, r22
    183e:	47 70       	andi	r20, 0x07	; 7
    1840:	40 5d       	subi	r20, 0xD0	; 208
    1842:	41 93       	st	Z+, r20
    1844:	b3 e0       	ldi	r27, 0x03	; 3
    1846:	0f d0       	rcall	.+30     	; 0x1866 <__ultoa_invert+0x86>
    1848:	c9 f7       	brne	.-14     	; 0x183c <__ultoa_invert+0x5c>
    184a:	f6 cf       	rjmp	.-20     	; 0x1838 <__ultoa_invert+0x58>
    184c:	46 2f       	mov	r20, r22
    184e:	4f 70       	andi	r20, 0x0F	; 15
    1850:	40 5d       	subi	r20, 0xD0	; 208
    1852:	4a 33       	cpi	r20, 0x3A	; 58
    1854:	18 f0       	brcs	.+6      	; 0x185c <__ultoa_invert+0x7c>
    1856:	49 5d       	subi	r20, 0xD9	; 217
    1858:	31 fd       	sbrc	r19, 1
    185a:	40 52       	subi	r20, 0x20	; 32
    185c:	41 93       	st	Z+, r20
    185e:	02 d0       	rcall	.+4      	; 0x1864 <__ultoa_invert+0x84>
    1860:	a9 f7       	brne	.-22     	; 0x184c <__ultoa_invert+0x6c>
    1862:	ea cf       	rjmp	.-44     	; 0x1838 <__ultoa_invert+0x58>
    1864:	b4 e0       	ldi	r27, 0x04	; 4
    1866:	a6 95       	lsr	r26
    1868:	97 95       	ror	r25
    186a:	87 95       	ror	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	ba 95       	dec	r27
    1872:	c9 f7       	brne	.-14     	; 0x1866 <__ultoa_invert+0x86>
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	61 05       	cpc	r22, r1
    1878:	71 05       	cpc	r23, r1
    187a:	08 95       	ret
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	0a 2e       	mov	r0, r26
    1882:	06 94       	lsr	r0
    1884:	57 95       	ror	r21
    1886:	47 95       	ror	r20
    1888:	37 95       	ror	r19
    188a:	27 95       	ror	r18
    188c:	ba 95       	dec	r27
    188e:	c9 f7       	brne	.-14     	; 0x1882 <__ultoa_invert+0xa2>
    1890:	62 0f       	add	r22, r18
    1892:	73 1f       	adc	r23, r19
    1894:	84 1f       	adc	r24, r20
    1896:	95 1f       	adc	r25, r21
    1898:	a0 1d       	adc	r26, r0
    189a:	08 95       	ret

0000189c <__prologue_saves__>:
    189c:	2f 92       	push	r2
    189e:	3f 92       	push	r3
    18a0:	4f 92       	push	r4
    18a2:	5f 92       	push	r5
    18a4:	6f 92       	push	r6
    18a6:	7f 92       	push	r7
    18a8:	8f 92       	push	r8
    18aa:	9f 92       	push	r9
    18ac:	af 92       	push	r10
    18ae:	bf 92       	push	r11
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	ca 1b       	sub	r28, r26
    18c6:	db 0b       	sbc	r29, r27
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	09 94       	ijmp

000018d4 <__epilogue_restores__>:
    18d4:	2a 88       	ldd	r2, Y+18	; 0x12
    18d6:	39 88       	ldd	r3, Y+17	; 0x11
    18d8:	48 88       	ldd	r4, Y+16	; 0x10
    18da:	5f 84       	ldd	r5, Y+15	; 0x0f
    18dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    18de:	7d 84       	ldd	r7, Y+13	; 0x0d
    18e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    18e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    18e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    18e6:	b9 84       	ldd	r11, Y+9	; 0x09
    18e8:	c8 84       	ldd	r12, Y+8	; 0x08
    18ea:	df 80       	ldd	r13, Y+7	; 0x07
    18ec:	ee 80       	ldd	r14, Y+6	; 0x06
    18ee:	fd 80       	ldd	r15, Y+5	; 0x05
    18f0:	0c 81       	ldd	r16, Y+4	; 0x04
    18f2:	1b 81       	ldd	r17, Y+3	; 0x03
    18f4:	aa 81       	ldd	r26, Y+2	; 0x02
    18f6:	b9 81       	ldd	r27, Y+1	; 0x01
    18f8:	ce 0f       	add	r28, r30
    18fa:	d1 1d       	adc	r29, r1
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	ed 01       	movw	r28, r26
    1908:	08 95       	ret

0000190a <_exit>:
    190a:	f8 94       	cli

0000190c <__stop_program>:
    190c:	ff cf       	rjmp	.-2      	; 0x190c <__stop_program>
